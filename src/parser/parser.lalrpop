use super::lexer;
use crate::ast::{expr, stmt, decl, self};

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = lexer::ParserError;

    enum lexer::Token {
        "auto" => lexer::Token::Auto,
        "break" => lexer::Token::Break,
        "case" => lexer::Token::Case,
        "char" => lexer::Token::Char,
        "const" => lexer::Token::Const,
        "continue" => lexer::Token::Continue,
        "default" => lexer::Token::Default,
        "do" => lexer::Token::Do,
        "double" => lexer::Token::Double,
        "else" => lexer::Token::Else,
        "enum" => lexer::Token::Enum, 
        "extern" => lexer::Token::Extern, 
        "float" => lexer::Token::Float,  
        "for" => lexer::Token::For, 
        "goto" => lexer::Token::Goto, 
        "if" => lexer::Token::If,
        "inline" => lexer::Token::Inline, 
        "int" => lexer::Token::Int, 
        "long" => lexer::Token::Long, 
        "register" => lexer::Token::Register, 
        "restrict" => lexer::Token::Restrict, 
        "return" => lexer::Token::Return,
        "short" => lexer::Token::Short,  
        "signed" => lexer::Token::Signed, 
        "sizeof" => lexer::Token::Sizeof, 
        "static" => lexer::Token::Static, 
        "struct" => lexer::Token::Struct,
        "switch" => lexer::Token::Switch, 
        "typedef" => lexer::Token::Typedef, 
        "union" => lexer::Token::Union, 
        "unsigned" => lexer::Token::Unsigned, 
        "void" => lexer::Token::Void,
        "volatile" => lexer::Token::Volatile, 
        "while" => lexer::Token::While,  
        "_Alignas" => lexer::Token::Alignas,  
        "_Alignof" => lexer::Token::Alignof, 
        "_Atomic" => lexer::Token::Atomic,
        "_Bool" => lexer::Token::Bool, 
        "_Complex" => lexer::Token::Complex, 
        "_Generic" => lexer::Token::Generic, 
        "_Imaginary" => lexer::Token::Imaginary, 
        "_Noreturn" => lexer::Token::Noreturn, 
        "_Static_assert" => lexer::Token::StaticAssert, 
        "_Thread_local" => lexer::Token::ThreadLocal,

        TypedefName => lexer::Token::TypedefName,
        Identifier => lexer::Token::Identifier,
        Constant => lexer::Token::Arrow,
        EnumerationConstant => lexer::Token::Identifier,
        StringLiteral => lexer::Token::StringLiteral,

        ")" => lexer::Token::RParenthesis,
        "(" => lexer::Token::LParenthesis,
        "," => lexer::Token::Comma,
        ":" => lexer::Token::Colon,
        "[" => lexer::Token::LBracket,
        "]" => lexer::Token::RBracket,
        "." => lexer::Token::Dot,
        "->" => lexer::Token::Arrow,
        "++" => lexer::Token::TwoPluses,
        "--" => lexer::Token::TwoMinuses,
        "{" => lexer::Token::LBrace,
        "}" => lexer::Token::RBrace,
        "&" => lexer::Token::Ampersand,
        "*" => lexer::Token::Asterisk,
        "+" => lexer::Token::Plus,
        "-" => lexer::Token::Minus, 
        "~" => lexer::Token::Tilde,
        "!" => lexer::Token::ExclamationMark,
        "/" => lexer::Token::Slash,
        "%" => lexer::Token::Percent,
        "<<" => lexer::Token::TwoSmaller,
        ">>" => lexer::Token::TwoLager,
        "<" => lexer::Token::Smaller,
        ">" => lexer::Token::Lager,
        "<=" => lexer::Token::LeOrEq,
        ">=" => lexer::Token::GeOrEq,
        "==" => lexer::Token::Equal, 
        "!=" => lexer::Token::NotEq,
        "^" => lexer::Token::Caret,
        "|" => lexer::Token::Bar,
        "&&" => lexer::Token::WAmpersand,
        "||" => lexer::Token::WBar,
        "?" => lexer::Token::QuestionMark,
        "=" => lexer::Token::Assign,
        "*=" => lexer::Token::AsteriskAssign,
        "/=" => lexer::Token::SlashAssign, 
        "%=" => lexer::Token::PercentAssign,
        "+=" => lexer::Token::PlusAssign,
        "-=" => lexer::Token::MinusWHyphen,
        "<<=" => lexer::Token::LGuillemetsAssign,
        ">>=" => lexer::Token::RGuillemetsAssign,
        "&=" => lexer::Token::AmpersandAssign,
        "^=" => lexer::Token::CaretAssign,
        "|=" => lexer::Token::VBarAssign,
        ";" => lexer::Token::Semicolon,
        "..." => lexer::Token::ThreeDots,
    }
}

Str<R>: String =
    <l: @L> <rule: R> <r: @R> 
        => input[l..r].to_string()
;

//////////////////////////////////////////////////
/// External definitions /////////////////////////
//////////////////////////////////////////////////

pub TranslationUnit: ast::Ast = 
    <items: ExternalDeclaration*> 
        => ast::Ast(items)
;

ExternalDeclaration: ast::ExternalDeclaration = {
    FunctionDefinition => ast::ExternalDeclaration::FunctionDefinition(Box::new(<>)),
    Declaration => ast::ExternalDeclaration::Declaration(Box::new(<>)),
};

DeclarationList = Declaration+;

FunctionDefinition: ast::FunctionDefinition = {
    <specifiers: DeclarationSpecifiers> <declarator: Declarator> <declaration: DeclarationList?> <compound: CompoundStatement>
        //ast::FunctionDefinition::new(specifiers, declarator, declaration, compound)
        => todo!()
};

//////////////////////////////////////////////////
/// Declarations /////////////////////////////////
//////////////////////////////////////////////////

Declaration: decl::Declaration = {
    <dspec: DeclarationSpecifiers> <idec: InitDeclaratorList?> ";" 
        => {
            let dec = idec.or(Default::default()).unwrap();
            todo!()
            // decl::Declaration::Other(decl::Other{specifiers: dspec, init_declarators: dec})
        },
    StaticAssertDeclaration,
};

//TODO: shift/reduce conflict 
DeclarationSpecifier: decl::DeclarationSpecifier = {
    <spec: StorageClassSpecifier>  
        => decl::DeclarationSpecifier::StorageClassSpecifier(spec),
    // <spec: TypeSpecifier>
        // => decl::DeclarationSpecifier::TypeSpecifier(spec), 
    // <spec: TypeQualifier>
        // => decl::DeclarationSpecifier::TypeQualifier(spec), 
    // <spec: FunctionSpecifier>
        // => decl::DeclarationSpecifier::FunctionSpecifier(spec), 
    // <spec: AlignmentSpecifier> 
        // => decl::DeclarationSpecifier::AlignmentSpecifier(spec), 
};

DeclarationSpecifiers = DeclarationSpecifier+;  

InitDeclaratorList: Vec<decl::InitDeclarator> = {
    InitDeclarator ("," InitDeclarator)*
        => todo!()
};

InitDeclarator: decl::InitDeclarator = {
    <dec: Declarator> 
        => todo!(),
    <dec: Declarator> "=" <ini: Initializer>
        => todo!(),
};

//TODO: shift/reduce conflict 
StorageClassSpecifier: decl::StorageClassSpecifier = {
    "typedef" => decl::StorageClassSpecifier::Typedef,
    // "extern" => decl::StorageClassSpecifier::Extern,
    // "static" => decl::StorageClassSpecifier::Static,
    // "_Thread_local" => decl::StorageClassSpecifier::ThreadLocal,
    // "auto" => decl::StorageClassSpecifier::Auto,
    // "register" => decl::StorageClassSpecifier::Register,
};

TypeSpecifier: decl::TypeSpecifier = {
    "void" 
        => decl::TypeSpecifier::Void,
    "char" 
        => decl::TypeSpecifier::Char,
    "short" 
        => decl::TypeSpecifier::Short,
    "int" 
        => decl::TypeSpecifier::Int,
    "long" 
        => decl::TypeSpecifier::Long,
    "float" 
        => decl::TypeSpecifier::Float,
    "double" 
        => decl::TypeSpecifier::Double,
    "signed" 
        => decl::TypeSpecifier::Signed,
    "unsigned" 
        => decl::TypeSpecifier::Unsigned,
    "_Bool" 
        => decl::TypeSpecifier::Bool,
    "_Complex" 
        => decl::TypeSpecifier::Complex,
    <ats: AtomicTypeSpecifier> 
        //decl::TypeSpecifier::AtomicTypeSpecifier(ats)
        => todo!(),
    <sous: StructOrUnionSpecifier>
        => decl::TypeSpecifier::StructOrUnionSpecifier(sous), 
    EnumSpecifier
        // decl::TypeSpecifier::EnumSpecifier(sous) 
        => todo!(),
    <tdef: TypedefName> 
        //decl::TypeSpecifier::TypedefName(sous)
        => todo!(),
};

StructOrUnionSpecifier: decl::StructOrUnionSpecifier = {
    StructOrUnion Identifier? "{" StructDeclarationList "}" => todo!(),
    StructOrUnion Identifier => todo!(),
};

StructOrUnion: decl::ObjKind = {
    "struct" => decl::ObjKind::Struct,
    "union" => decl::ObjKind::Union,
};

StructDeclarationList = StructDeclaration+;

StructDeclaration: decl::StructDeclaration = {
    SpecifierQualifierList StructDeclaratorList? ";"
        => todo!(),
    StaticAssertDeclaration
        => todo!(),
};

SpecifierQualifierList = 
    TypeSpecifier TypeQualifier
;

StructDeclaratorList: Vec<decl::StructDeclarator> = 
    StructDeclarator <n: ("," StructDeclarator)*> 
        => todo!() 
;

//TODO: shift/reduce conflict 
StructDeclarator: decl::StructDeclarator = {
    Declarator => todo!(),
    // Declarator? ":" ConstantExpression,
}

EnumSpecifier: decl::EnumSpecifier = {
    "enum" Identifier? ("{" EnumeratorList ","? "}")?
        => todo!()
};

#[inline]
EnumeratorList: Vec<decl::Enumerator> = 
    Enumerator <l: ("," Enumerator)*> 
        => todo!()
;

Enumerator: Vec<decl::Enumerator> =
    EnumerationConstant <c: ("=" ConstantExpression)?> 
        => todo!()
;

AtomicTypeSpecifier: decl::AtomicTypeSpecifier =
    "_Atomic" "(" <typename: TypeName> ")"
        //AtomicTypeSpecifier{typename}
        => todo!()
;

TypeQualifier: decl::TypeQualifier = {
    "const" => decl::TypeQualifier::Const,
    "restrict" => decl::TypeQualifier::Restrict,
    "volatile" => decl::TypeQualifier::Volatile,
    "_Atomic" => decl::TypeQualifier::Atomic,
};

FunctionSpecifier: decl::FunctionSpecifier = {
    "inline" => decl::FunctionSpecifier::Inline,
    "_Noreturn" => decl::FunctionSpecifier::Noreturn,
};

AlignmentSpecifier = {
    "_Alignas" "(" TypeName ")"
    "_Alignas" "(" ConstantExpression ")"
}

Declarator: decl::Declarator =    
    Pointer? DirectDeclarator => todo!()
;

DirectDeclarator = Identifier;

Pointer = ("*" TypeQualifierList?)+;
TypeQualifierList: Vec<decl::TypeQualifier> = TypeQualifier+;

ParameterTypeList: decl::ParameterTypeList = 
    <f: ParameterList> <is_variadic: ("," "...")?>
        => todo!()
;

#[inline]
ParameterList: Vec<decl::ParameterDeclaration> = 
    <f: ParameterDeclaration> <other: ("," ParameterDeclaration)*> 
        => todo!()
;

ParameterDeclaration: decl::ParameterDeclaration = {
    DeclarationSpecifiers Declarator 
        => decl::ParameterDeclaration{},
    DeclarationSpecifiers AbstractDeclarator?
        => decl::ParameterDeclaration{},
};

IdentifierList = Identifier ("," Identifier)*;

TypeName = SpecifierQualifierList AbstractDeclarator?;

AbstractDeclarator: decl::AbstractDeclarator = {
    Pointer => todo!(),
    Pointer? DirectAbstractDeclarator => todo!(),
};

DirectAbstractDeclarator: decl::DirectAbstractDeclarator = {
    "(" AbstractDeclarator ")"
        => todo!(),
    DirectAbstractDeclarator? "[" TypeQualifierList? AssignmentExpression? "]"
        => todo!(),
    DirectAbstractDeclarator? "[" "static" TypeQualifierList? AssignmentExpression "]"
        => todo!(),
    DirectAbstractDeclarator? "[" TypeQualifierList "static" AssignmentExpression "]"
        => todo!(),
    DirectAbstractDeclarator? "[" "*" "]"
        => todo!(),
    DirectAbstractDeclarator? "(" ParameterTypeList? ")"
        => todo!(),
};

Initializer: decl::Initializer = {
    <ae: AssignmentExpression>
        => todo!(),
    "{" <il: InitializerList> ","? "}" 
        => decl::Initializer::InitializerList(il),
};

#[inline]
InitializerList: decl::InitializerList = 
    Designation? Initializer ("," Designation? Initializer)* 
        => todo!()
;

Designation: Vec<decl::Designator> = <DesignatorList> "=";

DesignatorList: Vec<decl::Designator> = Designator+;

Designator: decl::Designator = {
    "[" <expr: ConstantExpression> "]" 
        => decl::Designator::new_index(expr),
    "." <ident: Str<Identifier>> 
        => decl::Designator::new_dot(ident),
};

StaticAssertDeclaration: decl::Declaration = 
    "_Static_assert" "(" <expr: ConstantExpression> "," <msg: Str<StringLiteral>> ")" ";"
        => decl::StaticAssert::new(expr, msg)
;

//////////////////////////////////////////////////
/// Expression ///////////////////////////////////
//////////////////////////////////////////////////

//TODO: shift/reduce conflict 
PrimaryExpression: expr::Expression = {
    <Str<Identifier>>
        => expr::Expression::Identifier(<>),
    //Constant,
    //StringLiteral,
    //"(" Expression ")",
    //GenericSelection,
};

GenericSelection: expr::Expression = 
    "_Generic" "(" <expression: AssignmentExpression> "," <association_list: GenericAssocList> ")" 
        => todo!()
;

GenericAssocList: Vec<expr::GenericAssociation> = { 
    GenericAssociation ("," GenericAssociation)* 
        => todo!()
};

GenericAssociation: expr::GenericAssociation = {
    TypeName ":" <expression: AssignmentExpression>
        => todo!(),
    "default" ":" <expression: AssignmentExpression>
        => todo!(),
};

PostfixExpression: expr::Expression = {
    PrimaryExpression,
    <lhs: PostfixExpression> "[" <rhs: Expression> "]" 
        => expr::TwoOperandsExpr::new_subscript(lhs, rhs),
    <callie: PostfixExpression> "(" <args: ArgumentExpressionList?> ")"
        => expr::CallExpr::new(callie, args.or(Default::default()).unwrap()),
    <lhs: PostfixExpression> "." <ident: Str<Identifier>>
        => {
            let rhs = expr::Expression::Identifier(ident);
            expr::TwoOperandsExpr::new_access(lhs, rhs)
        },
    <lhs: PostfixExpression> "->" <ident: Str<Identifier>>
        => {
            let rhs = expr::Expression::Identifier(ident);
            expr::TwoOperandsExpr::new_ptr_access(lhs, rhs)
        },
    <expr: PostfixExpression> "++"
        => expr::OneOperandExpr::new_postincrement(expr),
    <expr: PostfixExpression> "--"
        => expr::OneOperandExpr::new_postdecrement(expr),
    "(" TypeName ")" "{" <init_list: InitializerList> "}"
        => expr::CompoundLiteral::new(Box::new(init_list)),
    "(" TypeName ")" "{" <init_list: InitializerList> "," "}"
        => expr::CompoundLiteral::new(Box::new(init_list)),
};

ArgumentExpressionList: Vec<expr::Expression> = {
    AssignmentExpression <items: ("," AssignmentExpression)*>
        => todo!()
};

//TODO: shift/reduce conflict 
UnaryExpression: expr::Expression = {
    //PostfixExpression,
    //"++" UnaryExpression 
    //    => expr::OneOperandExpr::new_increment(<>),
    //"--" UnaryExpression 
    //    => expr::OneOperandExpr::new_decrement(<>),
    //UnaryOperator CastExpression,
    //"sizeof" UnaryExpression 
    //    => expr::Sizeof::new(<>),
    //"sizeof" "(" TypeName ")" 
    //    => expr::Sizeof::new(<>),
    //"_Alignof" "(" TypeName ")" 
    //    => expr::AlignOf::new(<>),
};

//TODO: shift/reduce conflict 
//UnaryOperator: expr::UnaryOp = {
    //"&" => expr::UnaryOp::Address,
    // "*" => expr::UnaryOp::Indirection,
    // "+" => expr::UnaryOp::Positive,
    // "-" => expr::UnaryOp::Negative,
    // "~" => expr::UnaryOp::BitwiseNot,
    // "!" => expr::UnaryOp::LogicalNot,
//};

CastExpression: expr::Expression = {
    UnaryExpression,
    "(" TypeName ")" <expr: CastExpression>
        => expr::CastExr::new((), expr),
};

MultiplicativeExpression: expr::Expression = {
    CastExpression,
    <lhs: MultiplicativeExpression> "*" <rhs: CastExpression>
        => expr::TwoOperandsExpr::new_mul(lhs, rhs),
    <lhs: MultiplicativeExpression> "/" <rhs: CastExpression>
        => expr::TwoOperandsExpr::new_div(lhs, rhs),
    <lhs: MultiplicativeExpression> "%" <rhs: CastExpression>
        => expr::TwoOperandsExpr::new_rem(lhs, rhs),
};

AdditiveExpression: expr::Expression = {
    MultiplicativeExpression,
    <lhs: AdditiveExpression> "+" <rhs: MultiplicativeExpression>
        => expr::TwoOperandsExpr::new_add(lhs, rhs),
    <lhs: AdditiveExpression> "-" <rhs: MultiplicativeExpression>
        => expr::TwoOperandsExpr::new_sub(lhs, rhs),
};

ShiftExpression: expr::Expression = {
    AdditiveExpression,
    <lhs: ShiftExpression> "<<" <rhs: AdditiveExpression>
        => expr::TwoOperandsExpr::new_left_shift(lhs, rhs),
    <lhs: ShiftExpression> ">>" <rhs: AdditiveExpression>
        => expr::TwoOperandsExpr::new_right_shift(lhs, rhs),
};

RelationalExpression: expr::Expression = {
    ShiftExpression,
    <lhs: RelationalExpression> "<" <rhs: ShiftExpression>
        => expr::TwoOperandsExpr::new_le(lhs, rhs),
    <lhs: RelationalExpression> ">" <rhs: ShiftExpression> 
        => expr::TwoOperandsExpr::new_ge(lhs, rhs),
    <lhs: RelationalExpression> "<=" <rhs: ShiftExpression>
        => expr::TwoOperandsExpr::new_ge_or_eq(lhs, rhs),
    <lhs: RelationalExpression> ">=" <rhs: ShiftExpression>
        => expr::TwoOperandsExpr::new_ge_or_eq(lhs, rhs),
};

EqualityExpression: expr::Expression = {
    RelationalExpression,
    <lhs: EqualityExpression> "==" <rhs: RelationalExpression>
        => expr::TwoOperandsExpr::new_eq(lhs, rhs),
    <lhs: EqualityExpression> "!=" <rhs: RelationalExpression> 
        => expr::TwoOperandsExpr::new_not_eq(lhs, rhs),
};

AndExpression: expr::Expression = {
    EqualityExpression
    <lhs: AndExpression> "&" <rhs: EqualityExpression>
        => expr::TwoOperandsExpr::new_bw_and(lhs, rhs),
}

ExclusiveOrExpression: expr::Expression = {
    AndExpression,
    <lhs: ExclusiveOrExpression> "^" <rhs: AndExpression> 
        => expr::TwoOperandsExpr::new_bw_xor(lhs, rhs),
};

InclusiveOrExpression: expr::Expression = {
    ExclusiveOrExpression,
    <lhs: InclusiveOrExpression> "|" <rhs: ExclusiveOrExpression> 
        => expr::TwoOperandsExpr::new_bw_or(lhs, rhs),
};

LogicalAndExpression: expr::Expression = {
    InclusiveOrExpression,
    <lhs: LogicalAndExpression> "&&" <rhs: InclusiveOrExpression> 
        => expr::TwoOperandsExpr::new_logical_and(lhs, rhs),
};

LogicalOrExpression: expr::Expression = {
    LogicalAndExpression,
    <lhs: LogicalOrExpression> "||" <rhs: LogicalAndExpression>
        => expr::TwoOperandsExpr::new_logical_or(lhs, rhs),
};

ConditionalExpression: expr::Expression = {
    LogicalOrExpression,
    LogicalOrExpression "?" Expression ":" ConditionalExpression
        => expr::Expression::Ternary(Box::new(expr::Ternary{})),
};

AssignmentExpression: expr::Expression = {
    ConditionalExpression,
    <lhs: UnaryExpression> <op: AssignmentOperator> <rhs: AssignmentExpression>
        => expr::Expression::TwoOperands(Box::new(expr::TwoOperandsExpr{lhs, op, rhs})),
};

AssignmentOperator: expr::BiTag = {
    "=" => expr::BiTag::Assign,
    "*=" => expr::BiTag::MulAssign,
    "/=" => expr::BiTag::DivAssign,
    "%=" => expr::BiTag::RemAssign,
    "+=" => expr::BiTag::AddAssign,
    "-=" => expr::BiTag::SubAssign,
    "<<=" => expr::BiTag::BwLShAssign,
    ">>=" => expr::BiTag::BwRShAssign,
    "&=" => expr::BiTag::BwAndAssign,
    "^=" => expr::BiTag::BwXorAssign,
    "|=" => expr::BiTag::BwOrAssign,
};

//TODO: expr::TwoOperandsExpr::new_comma()
Expression: expr::Expression = 
    AssignmentExpression ("," AssignmentExpression)* 
        => todo!()
;

ConstantExpression: expr::Expression = ConditionalExpression;

//////////////////////////////////////////////////
/// Statements ///////////////////////////////////
//////////////////////////////////////////////////

Statement: stmt::Statement = {
    LabeledStatement,
    CompoundStatement,
    ExpressionStatement,
    SelectionStatement,
    IterationStatement,
    JumpStatement,
};

CompoundStatement: stmt::Statement = {
    "{" <items: BlockItem*> "}" 
        => stmt::CompoundStmt::new(items),
};  

BlockItem: stmt::BlockItem = {
    Declaration => stmt::BlockItem::Declaration(<>),
    Statement => stmt::BlockItem::Statement(<>),
};

ExpressionStatement: stmt::Statement = {
    <expr: Expression> ";" => stmt::Statement::new_expr_stmt(expr),
};

LabeledStatement: stmt::Statement = {
    <label: Str<Identifier>> ":" <stmt: Statement>
        => stmt::Labeled::new(label, stmt),
    "case" <constant: ConstantExpression> ":" <body: Statement> 
        => stmt::Case::new(constant, body),
    "default" ":" <body: Statement> 
        => stmt::Default::new(body),
};

// TODO: shift/reduce conflict - dangling else 
// It can be resolved by using 'precedence' or 'associativity'
// Also for LR(1) avalible special sintax https://en.wikipedia.org/wiki/Dangling_else
// https://www.gnu.org/software/bison/manual/html_node/Non-Operators.html
SelectionStatement: stmt::Statement = {
    // #[precedence(level="2")]
    "if" "(" <pred: Expression> ")" <on_success: Statement>  
        => stmt::IfStmt::new(pred, on_success),  
    // #[precedence(level="1")]
    // "if" "(" <pred: Expression> ")" <on_success: Statement> "else" Statement
        // => stmt::Statement::IfElse(stmt::IfStmt{predicate: pred, first_stmt: on_success, second_stmt: on_failure}),
    // #[precedence(level="0")]
    "switch" "(" <controlling: Expression> ")" <body: Statement> 
        => stmt::Statement::new_switch(controlling, body),
};

//TODO: shift/reduce conflict 
ForInitializerPart: stmt::ForInit = {
    //Expression ";" => stmt::ForInit::Expression(<>),
    Declaration => stmt::ForInit::Declaration(Box::new(<>)),
};

IterationStatement: stmt::Statement = {
    "while" "(" <pred: Expression> ")" <body: Statement> 
        => stmt::Statement::new_while(pred, body),
    "do" <body: Statement> "while" "(" <pred: Expression> ")" ";"
        => stmt::Statement::new_do_while(pred, body),
    "for" "(" <init: ForInitializerPart?> <pred: Expression?> ";" <step: Expression?> ")" <body: Statement>
        => stmt::Statement::new_for(init, pred, step, body),
};

JumpStatement: stmt::Statement = {
    "goto" <ident: Str<Identifier>> ";" 
        => stmt::Statement::new_goto(ident),
    "continue" ";" 
        => stmt::Statement::new_continue(),
    "break" ";" 
        => stmt::Statement::new_break(),
    "return" <expr: Expression?> ";" 
        => stmt::Statement::new_return(expr),
};
