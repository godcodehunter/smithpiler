// auto-generated: "lalrpop 0.19.1"
// sha3: 9461eab2144f35ca5cfb3f16d9f7dfa2605c39b3702a5051cc5d5d15ed38c
use super::lexer;
use crate::ast::{expr, stmt, decl, self};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__TranslationUnit {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer;
    use crate::ast::{expr, stmt, decl, self};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(lexer::Token),
        Variant1(::std::option::Option<lexer::Token>),
        Variant2((lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)),
        Variant3(::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>),
        Variant4((lexer::Token, lexer::Token)),
        Variant5(::std::option::Option<(lexer::Token, lexer::Token)>),
        Variant6((lexer::Token, expr::Expression)),
        Variant7(::std::vec::Vec<(lexer::Token, expr::Expression)>),
        Variant8((lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)),
        Variant9(::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>),
        Variant10((lexer::Token, Vec<decl::Enumerator>)),
        Variant11(::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>),
        Variant12((lexer::Token, expr::GenericAssociation)),
        Variant13(::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>),
        Variant14(::std::vec::Vec<(lexer::Token, lexer::Token)>),
        Variant15((lexer::Token, decl::InitDeclarator)),
        Variant16(::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>),
        Variant17((lexer::Token, decl::ParameterDeclaration)),
        Variant18(::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>),
        Variant19((lexer::Token, decl::StructDeclarator)),
        Variant20(::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>),
        Variant21(::std::option::Option<(lexer::Token, expr::Expression)>),
        Variant22((lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)),
        Variant23(::std::option::Option<(lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)>),
        Variant24(usize),
        Variant25(decl::AbstractDeclarator),
        Variant26(::std::option::Option<decl::AbstractDeclarator>),
        Variant27(expr::Expression),
        Variant28((lexer::Token, lexer::Token, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), lexer::Token, lexer::Token, lexer::Token, expr::Expression, lexer::Token)),
        Variant29(Vec<expr::Expression>),
        Variant30(::std::option::Option<Vec<expr::Expression>>),
        Variant31(::std::option::Option<expr::Expression>),
        Variant32(expr::BiTag),
        Variant33(decl::AtomicTypeSpecifier),
        Variant34(stmt::BlockItem),
        Variant35(::std::vec::Vec<stmt::BlockItem>),
        Variant36(stmt::CompoundStmt),
        Variant37(decl::Declaration),
        Variant38(::std::vec::Vec<decl::Declaration>),
        Variant39(::std::option::Option<::std::vec::Vec<decl::Declaration>>),
        Variant40(decl::DeclarationSpecifier),
        Variant41(::std::vec::Vec<decl::DeclarationSpecifier>),
        Variant42(decl::Declarator),
        Variant43(Vec<decl::Designator>),
        Variant44(::std::option::Option<Vec<decl::Designator>>),
        Variant45(decl::Designator),
        Variant46(::std::vec::Vec<decl::Designator>),
        Variant47(decl::DirectAbstractDeclarator),
        Variant48(::std::option::Option<decl::DirectAbstractDeclarator>),
        Variant49(decl::DirectDeclarator),
        Variant50(decl::EnumSpecifier),
        Variant51(Vec<decl::Enumerator>),
        Variant52(stmt::Statement),
        Variant53(ast::ExternalDeclaration),
        Variant54(::std::vec::Vec<ast::ExternalDeclaration>),
        Variant55(stmt::ForInit),
        Variant56(::std::option::Option<stmt::ForInit>),
        Variant57(ast::FunctionDefinition),
        Variant58(decl::FunctionSpecifier),
        Variant59(Vec<expr::GenericAssociation>),
        Variant60(expr::GenericAssociation),
        Variant61((lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>)),
        Variant62(::std::option::Option<(lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>)>),
        Variant63(decl::InitDeclarator),
        Variant64(Vec<decl::InitDeclarator>),
        Variant65(::std::option::Option<Vec<decl::InitDeclarator>>),
        Variant66(decl::Initializer),
        Variant67(decl::InitializerList),
        Variant68(decl::ParameterDeclaration),
        Variant69(Vec<decl::ParameterDeclaration>),
        Variant70(decl::ParameterTypeList),
        Variant71(::std::option::Option<decl::ParameterTypeList>),
        Variant72(::std::option::Option<::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>>),
        Variant73((decl::TypeSpecifier, decl::TypeQualifier)),
        Variant74(decl::StorageClassSpecifier),
        Variant75(String),
        Variant76(decl::StructDeclaration),
        Variant77(::std::vec::Vec<decl::StructDeclaration>),
        Variant78(decl::StructDeclarator),
        Variant79(Vec<decl::StructDeclarator>),
        Variant80(::std::option::Option<Vec<decl::StructDeclarator>>),
        Variant81(decl::ObjKind),
        Variant82(decl::StructOrUnionSpecifier),
        Variant83(ast::Ast),
        Variant84(((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>)),
        Variant85(decl::TypeQualifier),
        Variant86(::std::vec::Vec<decl::TypeQualifier>),
        Variant87(Vec<decl::TypeQualifier>),
        Variant88(::std::option::Option<Vec<decl::TypeQualifier>>),
        Variant89(decl::TypeSpecifier),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 1
        0, 0, 0, 0, 0, 0, 0, -124, -124, -124, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, 154,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, -224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, -6, -6, -6, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 0, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 0, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, -8, -8, -8, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 209, 34, 142, 0, 210, 211, 35, 143, 0, 0, 0, 144, 212, 36, 213, 0, 145, 146, 0, 0, 37, 147, 148, 0, 0, 149, 214, 150, 151, 152, 153, 0, 215, 0, 0, 0, 0, 216, 0, 0, 217, 0, 154,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 154,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, -344, -344, -344, 0, 0, 0, 0, -344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -344, -344, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, -344, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, -344, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 0, 151, 152, 153, 0, 0, 0, 0, 0, 0, -323, 0, 0, 0, 0, 154,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 0, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 46, -337, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 51, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 0, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 29
        0, -105, -105, 238, 0, 0, 239, -105, 0, -105, 240, -105, 0, 241, 0, -105, 0, 242, 0, 0, 0, -105, 243, 0, 0, -105, -105, 244, -105, 245, -105, -105, -105, -105, 246, 0, 0, 0, 0, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, -191, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 209, 34, 142, 0, 210, 211, 35, 143, 0, 0, 0, 144, 212, 36, 213, 0, 145, 146, 0, 0, 37, 147, 148, 0, 0, 149, 214, 150, 151, 152, 153, 0, 215, 0, 0, 0, 0, 253, 0, 0, 217, 0, 154,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 81, -269, 9, 0, 0, 0, 0, -269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, -274, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 29, 0, 271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, -325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 46, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 46, 281, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 29, 0, 283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 141, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 81, -69, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 81, 281, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 154,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 29, 0, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0,
        // State 92
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 352, 0, 0, 0, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 29, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 0, 145, 146, 0, 0, 0, 147, 148, 0, 0, 149, 0, 150, 151, 152, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 377, 0, 0, 0, 0, 0,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 379, 0, 0, 0, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        0, 0, 0, 0, 0, 0, 0, 29, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 29, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 394, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 119
        0, 0, 0, 0, 0, 0, 0, 29, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 123
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 34, 0, 0, 210, 211, 35, 0, 0, 0, 0, 0, 212, 36, 213, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, -358, -358, -358, 0, 0, 0, 0, -358, 0, 0, 0, 0, 0, 0, 0, 0, 0, -358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -358, 0, 0, 0, 0, 0, -358, -358, -358, 0, 0, 0, 0, 0, 0, 0, 0, -358, -358, 0, 0, 0, -358, 0, 0, 0, -358, 0, 0, 0, 0, -358, -358, 0, -358, 0, -358, -358, 0, 0, -358, 0, -358, -358, -358, -358, -358, 0, 0, 0, 0, 0, 0, 0, 0, -358, 0, -358,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -197, -197, -197, 0, 0, 0, -197, 0, 0, 0, 0, -197, 0, 0, 0, 0, -197, 0, 0, 0, -197, 0, 0, 0, 0, -197, -197, 0, 0, 0, -197, -197, 0, 0, -197, 0, -197, -197, -197, -197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -197,
        // State 128
        0, 0, 0, 0, 0, 0, 0, -122, -122, -122, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, -122, -122, -122, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, -122, 0, 0, 0, -122, 0, 0, 0, 0, -122, -122, 0, 0, 0, -122, -122, 0, 0, -122, 0, -122, -122, -122, -122, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, -122,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -200, -200, -200, 0, 0, 0, -200, 0, 0, 0, 0, -200, 0, 0, 0, 0, -200, 0, 0, 0, -200, 0, 0, 0, 0, -200, -200, 0, 0, 0, -200, -200, 0, 0, -200, 0, -200, -200, -200, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -200,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -196, -196, -196, 0, 0, 0, -196, 0, 0, 0, 0, -196, 0, 0, 0, 0, -196, 0, 0, 0, -196, 0, 0, 0, 0, -196, -196, 0, 0, 0, -196, -196, 0, 0, -196, 0, -196, -196, -196, -196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -196,
        // State 131
        0, 0, 0, 0, 0, 0, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, -114, -114, 0, 0, 0, -114, 0, 0, -114, -114, -114, 0, -114, -114, -114, -114, 0, 0, 0, -114, -114, -114, -114, 0, -114, -114, 0, 0, -114, -114, -114, 0, 0, -114, -114, -114, -114, -114, -114, 0, -114, -114, 0, 0, 0, -114, 0, 0, -114, 0, -114,
        // State 132
        0, 0, 0, 0, 0, 0, 0, -120, -120, -120, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, -120, -120, -120, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, -120, 0, 0, 0, -120, 0, 0, 0, 0, -120, -120, 0, 0, 0, -120, -120, 0, 0, -120, 0, -120, -120, -120, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, -120,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 162, 0, 0,
        // State 134
        0, 0, 0, 0, 0, 0, 0, -359, -359, -359, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, -359, -359, -359, 0, 0, 0, 0, 0, 0, 0, 0, -359, -359, 0, 0, 0, -359, 0, 0, 0, -359, 0, 0, 0, 0, -359, -359, 0, -359, 0, -359, -359, 0, 0, -359, 0, -359, -359, -359, -359, -359, 0, 0, 0, 0, 0, 0, 0, 0, -359, 0, -359,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, -121, -121, -121, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, -121, -121, -121, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, -121, 0, 0, 0, -121, 0, 0, 0, 0, -121, -121, 0, 0, 0, -121, -121, 0, 0, -121, 0, -121, -121, -121, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, -121,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, -356, -356, -356, 0, 0, 0, 0, -356, 0, 0, 0, 0, 0, 0, 0, 0, 0, -356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -356, 0, 0, 0, 0, 0, -356, -356, -356, 0, 0, 0, 0, 0, 0, 0, 0, -356, -356, 0, 0, 0, -356, 0, 0, 0, -356, 0, 0, 0, 0, -356, -356, 0, -356, 0, -356, -356, 0, 0, -356, 0, -356, -356, -356, -356, -356, 0, 0, 0, 0, 0, 0, 0, 0, -356, 0, -356,
        // State 139
        0, 0, 0, 0, 0, 0, 0, -357, -357, -357, 0, 0, 0, 0, -357, 0, 0, 0, 0, 0, 0, 0, 0, 0, -357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -357, 0, 0, 0, 0, 0, -357, -357, -357, 0, 0, 0, 0, 0, 0, 0, 0, -357, -357, 0, 0, 0, -357, 0, 0, 0, -357, 0, 0, 0, 0, -357, -357, 0, -357, 0, -357, -357, 0, 0, -357, 0, -357, -357, -357, -357, -357, 0, 0, 0, 0, 0, 0, 0, 0, -357, 0, -357,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, -348, -348, -348, 0, 0, 0, 0, -348, 0, 0, 0, 0, 0, 0, 0, 0, 0, -348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -348, 0, 0, 0, 0, 0, -348, -348, -348, 0, 0, 0, 0, 0, 0, 0, 0, -348, -348, 0, 0, 0, -348, 0, 0, 0, -348, 0, 0, 0, 0, -348, -348, 0, -348, 0, -348, -348, 0, 0, -348, 0, -348, -348, -348, -348, -348, 0, 0, 0, 0, 0, 0, 0, 0, -348, 0, -348,
        // State 142
        0, 0, 0, 0, 0, 0, 0, -353, -353, -353, 0, 0, 0, 0, -353, 0, 0, 0, 0, 0, 0, 0, 0, 0, -353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -353, 0, 0, 0, 0, 0, -353, -353, -353, 0, 0, 0, 0, 0, 0, 0, 0, -353, -353, 0, 0, 0, -353, 0, 0, 0, -353, 0, 0, 0, 0, -353, -353, 0, -353, 0, -353, -353, 0, 0, -353, 0, -353, -353, -353, -353, -353, 0, 0, 0, 0, 0, 0, 0, 0, -353, 0, -353,
        // State 143
        0, 0, 0, 0, 0, 0, 0, -352, -352, -352, 0, 0, 0, 0, -352, 0, 0, 0, 0, 0, 0, 0, 0, 0, -352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -352, 0, 0, 0, 0, 0, -352, -352, -352, 0, 0, 0, 0, 0, 0, 0, 0, -352, -352, 0, 0, 0, -352, 0, 0, 0, -352, 0, 0, 0, 0, -352, -352, 0, -352, 0, -352, -352, 0, 0, -352, 0, -352, -352, -352, -352, -352, 0, 0, 0, 0, 0, 0, 0, 0, -352, 0, -352,
        // State 144
        0, 0, 0, 0, 0, 0, 0, -350, -350, -350, 0, 0, 0, 0, -350, 0, 0, 0, 0, 0, 0, 0, 0, 0, -350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -350, 0, 0, 0, 0, 0, -350, -350, -350, 0, 0, 0, 0, 0, 0, 0, 0, -350, -350, 0, 0, 0, -350, 0, 0, 0, -350, 0, 0, 0, 0, -350, -350, 0, -350, 0, -350, -350, 0, 0, -350, 0, -350, -350, -350, -350, -350, 0, 0, 0, 0, 0, 0, 0, 0, -350, 0, -350,
        // State 145
        0, 0, 0, 0, 0, 0, 0, -351, -351, -351, 0, 0, 0, 0, -351, 0, 0, 0, 0, 0, 0, 0, 0, 0, -351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -351, 0, 0, 0, 0, 0, -351, -351, -351, 0, 0, 0, 0, 0, 0, 0, 0, -351, -351, 0, 0, 0, -351, 0, 0, 0, -351, 0, 0, 0, 0, -351, -351, 0, -351, 0, -351, -351, 0, 0, -351, 0, -351, -351, -351, -351, -351, 0, 0, 0, 0, 0, 0, 0, 0, -351, 0, -351,
        // State 146
        0, 0, 0, 0, 0, 0, 0, -349, -349, -349, 0, 0, 0, 0, -349, 0, 0, 0, 0, 0, 0, 0, 0, 0, -349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -349, 0, 0, 0, 0, 0, -349, -349, -349, 0, 0, 0, 0, 0, 0, 0, 0, -349, -349, 0, 0, 0, -349, 0, 0, 0, -349, 0, 0, 0, 0, -349, -349, 0, -349, 0, -349, -349, 0, 0, -349, 0, -349, -349, -349, -349, -349, 0, 0, 0, 0, 0, 0, 0, 0, -349, 0, -349,
        // State 147
        0, 0, 0, 0, 0, 0, 0, -354, -354, -354, 0, 0, 0, 0, -354, 0, 0, 0, 0, 0, 0, 0, 0, 0, -354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -354, 0, 0, 0, 0, 0, -354, -354, -354, 0, 0, 0, 0, 0, 0, 0, 0, -354, -354, 0, 0, 0, -354, 0, 0, 0, -354, 0, 0, 0, 0, -354, -354, 0, -354, 0, -354, -354, 0, 0, -354, 0, -354, -354, -354, -354, -354, 0, 0, 0, 0, 0, 0, 0, 0, -354, 0, -354,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -329, 0, 0, 0, 0, 0, 0, -329, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, -315, -315, -315, 0, 0, 0, 0, -315, 0, 0, 0, 0, 0, 0, 0, 0, 0, -315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -315, 0, 0, 0, 0, 0, -315, -315, -315, 0, 0, 0, 0, 0, 0, 0, 0, -315, 0, 0, 0, 0, -315, 0, 0, 0, -315, 0, 0, 0, 0, -315, -315, 0, 0, 0, -315, -315, 0, 0, -315, 0, -315, -315, -315, -315, 0, 0, 0, 0, 0, 0, 0, 0, 0, -315, 0, -315,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -330, 0, 0, 0, 0, 0, 0, -330, 0, 0,
        // State 151
        0, 0, 0, 0, 0, 0, 0, -355, -355, -355, 0, 0, 0, 0, -355, 0, 0, 0, 0, 0, 0, 0, 0, 0, -355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -355, 0, 0, 0, 0, 0, -355, -355, -355, 0, 0, 0, 0, 0, 0, 0, 0, -355, -355, 0, 0, 0, -355, 0, 0, 0, -355, 0, 0, 0, 0, -355, -355, 0, -355, 0, -355, -355, 0, 0, -355, 0, -355, -355, -355, -355, -355, 0, 0, 0, 0, 0, 0, 0, 0, -355, 0, -355,
        // State 152
        0, 0, 0, 0, 0, 0, 0, -347, -347, -347, 0, 0, 0, 0, -347, 0, 0, 0, 0, 0, 0, 0, 0, 0, -347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -347, 0, 0, 0, 0, 0, -347, -347, -347, 0, 0, 0, 0, 0, 0, 0, 0, -347, -347, 0, 0, 0, -347, 0, 0, 0, -347, 0, 0, 0, 0, -347, -347, 0, -347, 0, -347, -347, 0, 0, -347, 0, -347, -347, -347, -347, -347, 0, 0, 0, 0, 0, 0, 0, 0, -347, 0, -347,
        // State 153
        0, 0, 0, 0, 0, 0, 0, -360, -360, -360, 0, 0, 0, 0, -360, 0, 0, 0, 0, 0, 0, 0, 0, 0, -360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -360, 0, 0, 0, 0, 0, -360, -360, -360, 0, 0, 0, 0, 0, 0, 0, 0, -360, -360, 0, 0, 0, -360, 0, 0, 0, -360, 0, 0, 0, 0, -360, -360, 0, -360, 0, -360, -360, 0, 0, -360, 0, -360, -360, -360, -360, -360, 0, 0, 0, 0, 0, 0, 0, 0, -360, 0, -360,
        // State 154
        0, 0, 0, 0, 0, 0, 0, -123, -123, -123, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, -123, -123, -123, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, -123, 0, 0, 0, -123, 0, 0, 0, 0, -123, -123, 0, 0, 0, -123, -123, 0, 0, -123, 0, -123, -123, -123, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, -123,
        // State 155
        0, 0, 0, 0, 0, 0, 0, -278, -278, 13, 0, 0, 0, 0, -278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -278, 0, 0,
        // State 156
        0, 0, 0, 0, 0, 0, 0, 19, -126, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, -126, -126, -126, 0, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, -126, 0, 0, 0, 0, -126, -126, 0, 0, 0, -126, -126, 0, 0, -126, 0, -126, -126, -126, -126, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, -126,
        // State 157
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 158
        0, 0, 0, 0, 0, 0, 0, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, -113, -113, 0, 0, 0, -113, 0, 0, -113, -113, -113, 0, -113, -113, -113, -113, 0, 0, 0, -113, -113, -113, -113, 0, -113, -113, 0, 0, -113, -113, -113, 0, 0, -113, -113, -113, -113, -113, -113, 0, -113, -113, 0, 0, 0, -113, 0, 0, -113, 0, -113,
        // State 159
        0, 0, 0, 0, 0, 0, 0, -158, -158, 0, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, -158, -158, -158, 0, 0, 0, -158, 0, 0, 0, 0, -158, 0, 0, 0, 0, -158, 0, 0, 0, -158, 0, 0, 0, 0, -158, -158, 0, 0, 0, -158, -158, 0, 0, -158, 0, -158, -158, -158, -158, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0, -158,
        // State 160
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201, -201, -201, 0, 0, 0, -201, 0, 0, 0, 0, -201, 0, 0, 0, 0, -201, 0, 0, 0, -201, 0, 0, 0, 0, -201, -201, 0, 0, 0, -201, -201, 0, 0, -201, 0, -201, -201, -201, -201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201,
        // State 161
        0, 0, 0, 0, 0, 0, 0, -333, -333, -333, 0, 0, 0, 0, -333, 0, 0, 0, 0, 0, 0, 0, 0, 0, -333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -333, 0, 0, 0, 0, 0, -333, -333, -333, 0, 0, 0, 0, 0, 0, 0, 0, -333, -333, 0, 0, 0, -333, 0, 0, 0, -333, 0, 0, 0, 0, -333, -333, 0, -333, 0, -333, -333, 0, 0, -333, 0, -333, -333, -333, -333, -333, 0, 26, 0, 0, 0, 0, 0, 0, -333, 0, -333,
        // State 162
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -206, -206, -206, 0, 0, 0, -206, 0, 0, 0, 0, -206, 0, 0, 0, 0, -206, 0, 0, 0, -206, 0, 0, 0, 0, -206, -206, 0, 0, 0, -206, -206, 0, 0, -206, 0, -206, -206, -206, -206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -206,
        // State 163
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, -115, -115, 0, 0, 0, -115, 0, 0, 0, 0, -115, 0, 0, 0, 0, -115, 0, 0, 0, -115, 0, 0, 0, 0, -115, -115, 0, 0, 0, -115, -115, 0, 0, -115, 0, -115, -115, -115, -115, 0, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, -115,
        // State 164
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 165
        0, 0, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, -112, -112, 0, 0, 0, -112, 0, 0, -112, -112, -112, 0, -112, -112, -112, -112, 0, 0, 0, -112, -112, -112, -112, 0, -112, -112, 0, 0, -112, -112, -112, 0, 0, -112, -112, -112, -112, -112, -112, 0, -112, -112, 0, 0, 0, -112, 0, 0, -112, 0, -112,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 19, -125, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, -125, -125, -125, 0, 0, 0, -125, 0, 0, 0, 0, -125, 0, 0, 0, 0, -125, 0, 0, 0, -125, 0, 0, 0, 0, -125, -125, 0, 0, 0, -125, -125, 0, 0, -125, 0, -125, -125, -125, -125, 0, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, -125,
        // State 167
        0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 0, 0, 0, 0, 0, 0, -342, -342, -342, 0, 0, 0, 0, -342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -342, -342, 0, 0, 0, 0, -342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -342, 0, 0, 0, 0, -342, 0, 0, 0, 0, 0, 0, -342, 0, 0, 0, 0, 0, 0, 0, 0, -342, 0, 0,
        // State 169
        0, 0, 0, 0, 0, 0, 0, -5, -5, -5, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0,
        // State 170
        0, 0, 0, 0, 0, 0, 0, -341, -341, -341, 0, 0, 0, 0, -341, 0, 0, 0, 0, 0, 0, 0, 0, 0, -341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -341, -341, 0, 0, 0, 0, -341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -341, 0, 0, 0, 0, -341, 0, 0, 0, 0, 0, 0, -341, 0, 0, 0, 0, 0, 0, 0, 0, -341, 0, 0,
        // State 171
        0, 0, 0, 0, 0, 0, 0, -338, -338, -338, 0, 0, 0, 0, -338, 0, 0, 0, 0, 0, 0, 0, 0, 0, -338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -338, -338, 0, 0, 0, 0, -338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -338, 0, 0, 0, 0, -338, 0, 0, 0, 0, 0, 0, -338, 0, 0, 0, 0, 0, 0, 0, 0, -338, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, -339, -339, -339, 0, 0, 0, 0, -339, 0, 0, 0, 0, 0, 0, 0, 0, 0, -339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -339, -339, 0, 0, 0, 0, -339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -339, 0, 0, 0, 0, -339, 0, 0, 0, 0, 0, 0, -339, 0, 0, 0, 0, 0, 0, 0, 0, -339, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, -340, -340, -340, 0, 0, 0, 0, -340, 0, 0, 0, 0, 0, 0, 0, 0, 0, -340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -340, -340, 0, 0, 0, 0, -340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -340, 0, 0, 0, 0, -340, 0, 0, 0, 0, 0, 0, -340, 0, 0, 0, 0, 0, 0, 0, 0, -340, 0, 0,
        // State 174
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -320, -320, -320, 0, 0, 0, -320, 0, 0, 0, 0, -320, 0, 0, 0, 0, -320, 0, 0, 0, -320, 0, 0, 0, 0, -320, -320, 0, 0, 0, -320, -320, 0, 0, -320, 0, 0, -320, -320, -320, 0, 0, 0, 0, 0, 0, -320, 0, 0, 0, 0, -320,
        // State 175
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -321, -321, -321, 0, 0, 0, -321, 0, 0, 0, 0, -321, 0, 0, 0, 0, -321, 0, 0, 0, -321, 0, 0, 0, 0, -321, -321, 0, 0, 0, -321, -321, 0, 0, -321, 0, 0, -321, -321, -321, 0, 0, 0, 0, 0, 0, -321, 0, 0, 0, 0, -321,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, -305, 0, 0, -305, -305, 0, -305, -305, 0, 0, 48, 0, 0, -305, 49, 0, 0, 0, 0, 0, 0, 0, -305, -305, -305, -305, 0, -305, 0, -305, -305, -305, -305, 0, -305, 0, -305, -305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -305, 0, -305, -305, 0, 0, 0, 0, 0,
        // State 179
        0, 0, 0, 0, 0, -189, 0, 0, -189, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, -189, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, 0, -189, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, 0, -189, -189, 0, 0, 0, 0, 0,
        // State 180
        0, -263, -263, 0, -263, -263, 0, -263, -263, -263, 0, -263, 0, 0, -263, -263, 0, 0, 0, 0, 0, -263, 0, -263, -263, -263, -263, 0, -263, 0, -263, -263, -263, -263, 0, -263, 0, -263, -263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -263, 0, -263, -263, 0, 0, 0, 0, 0,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 183
        0, 0, 0, 0, 0, -220, 0, 0, -220, 0, 0, 0, 0, 0, -220, 0, 0, 0, 0, 0, 0, 0, 0, -220, -220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -220, 0, -220, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -220, 0, -220, -220, 0, 0, 0, 0, 0,
        // State 184
        0, 0, 0, 0, 0, -259, 0, 0, -259, 0, 0, 0, 0, 0, -259, 0, 0, 0, 0, 0, 0, 0, 0, -259, -259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -259, 0, -259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, -259, -259, 0, 0, 0, 0, 0,
        // State 185
        0, 0, 0, 0, 0, 55, 0, 0, -261, 0, 0, 0, 0, 0, -261, 0, 0, 0, 0, 0, 0, 0, 0, -261, -261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -261, 0, -261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -261, -261, 0, 0, 0, 0, 0,
        // State 186
        0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, -109, 0, 0, 0, 0, 0,
        // State 187
        0, -74, 58, 0, -74, -74, 0, -74, -74, 59, 0, -74, 0, 0, -74, -74, 0, 0, 0, 0, 0, 60, 0, -74, -74, -74, -74, 0, -74, 0, -74, -74, -74, -74, 0, -74, 0, -74, -74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, -74, -74, 0, 0, 0, 0, 0,
        // State 188
        0, -186, 0, 0, -186, -186, 0, -186, -186, 0, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, 0, 0, 0, -186, -186, 61, 0, 0, 62, 0, -186, 63, 64, 0, 0, -186, 0, -186, -186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -186, 0, -186, -186, 0, 0, 0, 0, 0,
        // State 189
        0, -298, 0, 0, -298, -298, 0, -298, -298, 0, 0, 0, 0, 0, -298, 0, 0, 0, 0, 0, 0, 0, 0, -298, -298, -298, 65, 0, -298, 0, -298, -298, -298, 66, 0, -298, 0, -298, -298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -298, 0, -298, -298, 0, 0, 0, 0, 0,
        // State 190
        0, -105, -105, 0, -105, -105, 0, -105, -105, -105, 0, -105, 0, 0, -105, -105, 0, 0, 0, 0, 0, -105, 0, -105, -105, -105, -105, 0, -105, 0, -105, -105, -105, -105, 0, -105, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, -105, -105, 0, 0, 0, 0, 0,
        // State 191
        0, 0, 0, 0, 0, 0, 0, -7, -7, -7, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0,
        // State 192
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, -116, -116, 0, 0, 0, -116, 0, 0, 0, 0, -116, 0, 0, 0, 0, -116, 0, 0, 0, -116, 0, 0, 0, 0, -116, -116, 0, 0, 0, -116, -116, 0, 0, -116, 0, -116, -116, -116, -116, 0, 0, -116, 0, 0, 0, 0, 0, 0, 0, 0, -116,
        // State 193
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -205, -205, -205, 0, 0, 0, -205, 0, 0, 0, 0, -205, 0, 0, 0, 0, -205, 0, 0, 0, -205, 0, 0, 0, 0, -205, -205, 0, 0, 0, -205, -205, 0, 0, -205, 0, -205, -205, -205, -205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -205,
        // State 194
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 195
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0,
        // State 196
        0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, -83, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0,
        // State 197
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 198
        0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103, -103, 0, 0, 0, -103, 0, 0, -103, -103, -103, 0, -103, -103, -103, -103, 0, 0, 0, -103, -103, -103, -103, 0, -103, -103, 0, 0, -103, -103, -103, 0, 0, -103, -103, -103, -103, -103, -103, 0, -103, 0, 0, 0, 0, -103, 0, 0, -103, 0, -103,
        // State 199
        0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, -99, -99, 0, 0, 0, -99, 0, 0, -99, -99, -99, 0, -99, -99, -99, -99, 0, 0, 0, -99, -99, -99, -99, 0, -99, -99, 0, 0, -99, -99, -99, 0, 0, -99, -99, -99, -99, -99, -99, 0, -99, 0, 0, 0, 0, -99, 0, 0, -99, 0, -99,
        // State 200
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 201
        0, 0, 0, 0, 0, 0, 0, -310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -310, -310, -310, 0, 0, 0, -310, 0, 0, -310, -310, -310, 0, -310, -310, -310, -310, 0, 0, 0, -310, -310, -310, -310, 0, -310, -310, 0, 0, -310, -310, -310, 0, 0, -310, -310, -310, -310, -310, -310, 0, -310, 0, 0, 0, 0, -310, 0, 0, -310, 0, -310,
        // State 202
        0, 0, 0, 0, 0, 0, 0, -312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -312, -312, -312, 0, 0, 0, -312, 0, 0, -312, -312, -312, 0, -312, -312, -312, -312, 0, 0, 0, -312, -312, -312, -312, 0, -312, -312, 0, 0, -312, -312, -312, 0, 0, -312, -312, -312, -312, -312, -312, 0, -312, 0, 0, 0, 0, -312, 0, 0, -312, 0, -312,
        // State 203
        0, 0, 0, 0, 0, 0, 0, -313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -313, -313, -313, 0, 0, 0, -313, 0, 0, -313, -313, -313, 0, -313, -313, -313, -313, 0, 0, 0, -313, -313, -313, -313, 0, -313, -313, 0, 0, -313, -313, -313, 0, 0, -313, -313, -313, -313, -313, -313, 0, -313, 0, 0, 0, 0, -313, 0, 0, -313, 0, -313,
        // State 204
        0, 0, 0, 0, 0, 0, 0, -309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -309, -309, -309, 0, 0, 0, -309, 0, 0, -309, -309, -309, 0, -309, -309, -309, -309, 0, 0, 0, -309, -309, -309, -309, 0, -309, -309, 0, 0, -309, -309, -309, 0, 0, -309, -309, -309, -309, -309, -309, 0, -309, 0, 0, 0, 0, -309, 0, 0, -309, 0, -309,
        // State 205
        0, 0, 0, 0, 0, 0, 0, -311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -311, -311, -311, 0, 0, 0, -311, 0, 0, -311, -311, -311, 0, -311, -311, -311, -311, 0, 0, 0, -311, -311, -311, -311, 0, -311, -311, 0, 0, -311, -311, -311, 0, 0, -311, -311, -311, -311, -311, -311, 0, -311, 0, 0, 0, 0, -311, 0, 0, -311, 0, -311,
        // State 206
        0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, -100, -100, 0, 0, 0, -100, 0, 0, -100, -100, -100, 0, -100, -100, -100, -100, 0, 0, 0, -100, -100, -100, -100, 0, -100, -100, 0, 0, -100, -100, -100, 0, 0, -100, -100, -100, -100, -100, -100, 0, -100, 0, 0, 0, 0, -100, 0, 0, -100, 0, -100,
        // State 207
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 208
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 209
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 210
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 211
        0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 212
        0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 213
        0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 214
        0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 215
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, -107, -107, 0, 0, 0, -107, 0, 0, 0, 0, -107, 0, 0, 0, 0, -107, 0, 0, 0, -107, 0, 0, 0, 0, -107, -107, 0, 0, 0, -107, -107, 0, 0, -107, 0, -107, -107, -107, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107,
        // State 216
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -316, 0, 0, 0, -316, -316, 0, 0, 0, 0, -316, 0, 0, 0, 0, 0, 0, -316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 217
        0, 0, 0, 0, 0, 0, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 218
        0, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 219
        0, 0, 0, 0, 0, 0, 0, -170, -170, 0, 0, 0, 0, 0, -170, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170, 0, 0, 0, 0, -170, 0, 0, 0, 0, 0, 0, -170, 0, 0, 0, 0, 0, -170, -170, -170, 0, 0, 0, -170, 0, 0, 0, 0, -170, 0, 0, 0, 0, -170, 0, 0, 0, -170, 0, 0, 0, 0, -170, -170, 0, 0, 0, -170, -170, 0, 0, -170, 0, -170, -170, -170, -170, 0, 0, -170, 0, 0, 0, 0, 0, 0, 0, 0, -170,
        // State 220
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 221
        0, 0, 0, 0, 0, 0, 0, -163, -163, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, -163, -163, -163, 0, 0, 0, -163, 0, 0, 0, 0, -163, 0, 0, 0, 0, -163, 0, 0, 0, -163, 0, 0, 0, 0, -163, -163, 0, 0, 0, -163, -163, 0, 0, -163, 0, -163, -163, -163, -163, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, -163,
        // State 222
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 223
        0, 0, 0, 0, 0, 0, 0, -159, -159, 0, 0, 0, 0, 0, -159, 0, 0, 0, 0, 0, 0, 0, 0, 0, -159, 0, 0, 0, 0, -159, 0, 0, 0, 0, 0, 0, -159, 0, 0, 0, 0, 0, -159, -159, -159, 0, 0, 0, -159, 0, 0, 0, 0, -159, 0, 0, 0, 0, -159, 0, 0, 0, -159, 0, 0, 0, 0, -159, -159, 0, 0, 0, -159, -159, 0, 0, -159, 0, -159, -159, -159, -159, 0, 0, -159, 0, 0, 0, 0, 0, 0, 0, 0, -159,
        // State 224
        0, 0, 0, 0, 0, 0, 0, -343, -343, -343, 0, 0, 0, 0, -343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -343, -343, 0, 0, 0, 0, -343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -343, 0, 0, 0, 0, -343, 0, 0, 0, 0, 0, 0, -343, 0, 0, 0, 0, 0, 0, 0, 0, -343, 0, 0,
        // State 225
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 226
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 227
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -319, -319, -319, 0, 0, 0, -319, 0, 0, 0, 0, -319, 0, 0, 0, 0, -319, 0, 0, 0, -319, 0, 0, 0, 0, -319, -319, 0, 0, 0, -319, -319, 0, 0, -319, 0, 0, -319, -319, -319, 0, 0, 0, 0, 0, 0, -319, 0, 0, 0, 0, -319,
        // State 228
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -322, -322, -322, 0, 0, 0, -322, 0, 0, 0, 0, -322, 0, 0, 0, 0, -322, 0, 0, 0, -322, 0, 0, 0, 0, -322, -322, 0, 0, 0, -322, -322, 0, 0, -322, 0, 0, -322, -322, -322, 0, 0, 0, 0, 0, 0, -322, 0, 0, 0, 0, -322,
        // State 229
        0, 0, 0, 0, 0, 0, 0, -332, -332, -332, 0, 0, 0, 0, -332, 0, 0, 0, 0, 0, 0, 0, 0, 0, -332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -332, 0, 0, 0, 0, 0, -332, -332, -332, 0, 0, 0, 0, 0, 0, 0, 0, -332, -332, 0, 0, 0, -332, 0, 0, 0, -332, 0, 0, 0, 0, -332, -332, 0, -332, 0, -332, -332, 0, 0, -332, 0, -332, -332, -332, -332, -332, 0, 0, 0, 0, 0, 0, 0, 0, -332, 0, -332,
        // State 230
        0, 0, 0, 0, 0, 0, 0, -308, -308, -308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -308, 0, 0,
        // State 231
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
        // State 232
        0, 0, 0, 0, 0, 0, 0, 0, -336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 233
        0, 0, 0, 0, 0, 0, 0, 86, -71, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 234
        0, 0, 0, 0, 0, 0, 0, -98, -98, -98, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, -98, -98, -98, 0, 0, 0, 0, 0, 0, 0, 0, -98, -98, 0, 0, 0, -98, 0, 0, 0, -98, 0, 0, 0, 0, -98, -98, 0, -98, 0, -98, -98, 0, 0, -98, 0, -98, -98, -98, -98, -98, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, -98,
        // State 235
        0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 236
        0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 237
        0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 238
        0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 239
        0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 240
        0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 241
        0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 242
        0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 243
        0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 244
        0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 245
        0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 246
        0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 247
        0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 248
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 249
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 250
        0, 0, 0, 0, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, -192, -192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 251
        0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, -104, -104, 0, 0, 0, -104, 0, 0, -104, -104, -104, 0, -104, -104, -104, -104, 0, 0, 0, -104, -104, -104, -104, 0, -104, -104, 0, 0, -104, -104, -104, 0, 0, -104, -104, -104, -104, -104, -104, 0, -104, 0, 0, 0, 0, -104, 0, 0, -104, 0, -104,
        // State 252
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108, -108, 0, 0, 0, -108, 0, 0, 0, 0, -108, 0, 0, 0, 0, -108, 0, 0, 0, -108, 0, 0, 0, 0, -108, -108, 0, 0, 0, -108, -108, 0, 0, -108, 0, -108, -108, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108,
        // State 253
        0, 0, 0, 0, 0, 0, 0, -195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -195, -195, -195, 0, 0, 0, -195, 0, 0, -195, -195, -195, 0, -195, -195, -195, -195, 0, 0, 0, -195, -195, -195, -195, 0, -195, -195, 0, 0, -195, -195, -195, 0, 0, -195, -195, -195, -195, -195, -195, 0, -195, 0, 0, 0, 0, -195, 0, 0, -195, 0, -195,
        // State 254
        0, 0, 0, 0, 0, 0, 0, -253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -253, -253, -253, 0, 0, 0, -253, 0, 0, -253, -253, -253, 0, -253, -253, -253, -253, 0, 0, 0, -253, -253, -253, -253, 0, -253, -253, 0, 0, -253, -253, -253, 0, 0, -253, -253, -253, -253, -253, -253, 0, -253, 0, 0, 0, 0, -253, 0, 0, -253, 0, -253,
        // State 255
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 256
        0, 0, 0, 0, 0, 0, 0, -252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -252, -252, -252, 0, 0, 0, -252, 0, 0, -252, -252, -252, 0, -252, -252, -252, -252, 0, 0, 0, -252, -252, -252, -252, 0, -252, -252, 0, 0, -252, -252, -252, 0, 0, -252, -252, -252, -252, -252, -252, 0, -252, 0, 0, 0, 0, -252, 0, 0, -252, 0, -252,
        // State 257
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 258
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 259
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 260
        0, 0, 0, 0, 0, 0, 0, -255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -255, -255, -255, 0, 0, 0, -255, 0, 0, -255, -255, -255, 0, -255, -255, -255, -255, 0, 0, 0, -255, -255, -255, -255, 0, -255, -255, 0, 0, -255, -255, -255, 0, 0, -255, -255, -255, -255, -255, -255, 0, -255, 0, 0, 0, 0, -255, 0, 0, -255, 0, -255,
        // State 261
        0, 0, 0, 0, 0, 0, 0, 0, -268, 0, 0, 0, 0, 0, -268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 262
        0, 0, 0, 0, 0, 0, 0, 0, -267, 0, 0, 0, 0, 0, -267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 263
        0, 0, 0, 0, 0, 0, 0, -169, -169, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, -169, -169, -169, 0, 0, 0, -169, 0, 0, 0, 0, -169, 0, 0, 0, 0, -169, 0, 0, 0, -169, 0, 0, 0, 0, -169, -169, 0, 0, 0, -169, -169, 0, 0, -169, 0, -169, -169, -169, -169, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0, -169,
        // State 264
        0, 0, 0, 0, 0, 0, 0, 0, -275, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 265
        0, 0, 0, 0, 0, 0, 0, -168, -168, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, -168, -168, -168, 0, 0, 0, -168, 0, 0, 0, 0, -168, 0, 0, 0, 0, -168, 0, 0, 0, -168, 0, 0, 0, 0, -168, -168, 0, 0, 0, -168, -168, 0, 0, -168, 0, -168, -168, -168, -168, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, -168,
        // State 266
        0, 0, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 267
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
        // State 268
        0, 0, 0, 0, 0, 0, 0, -162, -162, 0, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, 0, 0, 0, -162, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, -162, -162, -162, 0, 0, 0, -162, 0, 0, 0, 0, -162, 0, 0, 0, 0, -162, 0, 0, 0, -162, 0, 0, 0, 0, -162, -162, 0, 0, 0, -162, -162, 0, 0, -162, 0, -162, -162, -162, -162, 0, 0, -162, 0, 0, 0, 0, 0, 0, 0, 0, -162,
        // State 269
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 270
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 271
        0, 0, 0, 0, 0, 0, 0, -161, -161, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, -161, -161, -161, 0, 0, 0, -161, 0, 0, 0, 0, -161, 0, 0, 0, 0, -161, 0, 0, 0, -161, 0, 0, 0, 0, -161, -161, 0, 0, 0, -161, -161, 0, 0, -161, 0, -161, -161, -161, -161, 0, 0, -161, 0, 0, 0, 0, 0, 0, 0, 0, -161,
        // State 272
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 273
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 274
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, -326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 275
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -318, -318, -318, 0, 0, 0, -318, 0, 0, 0, 0, -318, 0, 0, 0, 0, -318, 0, 0, 0, -318, 0, 0, 0, 0, -318, -318, 0, 0, 0, -318, -318, 0, 0, -318, 0, 0, -318, -318, -318, 0, 0, 0, 0, 0, 0, -318, 0, 0, 0, 0, -318,
        // State 276
        0, 0, 0, 0, 0, 0, 0, -331, -331, -331, 0, 0, 0, 0, -331, 0, 0, 0, 0, 0, 0, 0, 0, 0, -331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -331, 0, 0, 0, 0, 0, -331, -331, -331, 0, 0, 0, 0, 0, 0, 0, 0, -331, -331, 0, 0, 0, -331, 0, 0, 0, -331, 0, 0, 0, 0, -331, -331, 0, -331, 0, -331, -331, 0, 0, -331, 0, -331, -331, -331, -331, -331, 0, 0, 0, 0, 0, 0, 0, 0, -331, 0, -331,
        // State 277
        0, 0, 0, 0, 0, 0, 0, 86, -70, 0, 0, 0, 0, 0, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 278
        0, 0, 0, 0, 0, 0, 0, 0, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 279
        0, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 280
        0, 0, 0, 0, 0, 0, 0, -155, -155, 0, 0, 0, 0, 0, -155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 281
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 282
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 283
        0, 0, 0, 0, 0, 0, 0, -143, -143, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 284
        0, -75, 58, 0, -75, -75, 0, -75, -75, 59, 0, -75, 0, 0, -75, -75, 0, 0, 0, 0, 0, 60, 0, -75, -75, -75, -75, 0, -75, 0, -75, -75, -75, -75, 0, -75, 0, -75, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, -75, -75, 0, 0, 0, 0, 0,
        // State 285
        0, -76, 58, 0, -76, -76, 0, -76, -76, 59, 0, -76, 0, 0, -76, -76, 0, 0, 0, 0, 0, 60, 0, -76, -76, -76, -76, 0, -76, 0, -76, -76, -76, -76, 0, -76, 0, -76, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, -76, -76, 0, 0, 0, 0, 0,
        // State 286
        0, 0, 0, 0, 0, 0, 0, 0, 345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 287
        0, 0, 0, 0, 0, 0, 0, 0, -317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 288
        0, -188, 0, 0, -188, -188, 0, -188, -188, 0, 0, 0, 0, 0, -188, 0, 0, 0, 0, 0, 0, 0, 0, -188, -188, 61, 0, 0, 62, 0, -188, 63, 64, 0, 0, -188, 0, -188, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -188, 0, -188, -188, 0, 0, 0, 0, 0,
        // State 289
        0, -187, 0, 0, -187, -187, 0, -187, -187, 0, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, 0, 0, 0, -187, -187, 61, 0, 0, 62, 0, -187, 63, 64, 0, 0, -187, 0, -187, -187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -187, 0, -187, -187, 0, 0, 0, 0, 0,
        // State 290
        0, 0, 0, 0, 0, -190, 0, 0, -190, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, -190, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, -190, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, -190, -190, 0, 0, 0, 0, 0,
        // State 291
        0, 0, 0, 0, 0, -221, 0, 0, -221, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, 0, 0, -221, -221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -221, 0, -221, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -221, 0, -221, -221, 0, 0, 0, 0, 0,
        // State 292
        0, 0, 0, 0, 0, -260, 0, 0, -260, 0, 0, 0, 0, 0, -260, 0, 0, 0, 0, 0, 0, 0, 0, -260, -260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -260, 0, -260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, -260, -260, 0, 0, 0, 0, 0,
        // State 293
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 294
        0, 0, 0, 0, 0, 55, 0, 0, -262, 0, 0, 0, 0, 0, -262, 0, 0, 0, 0, 0, 0, 0, 0, -262, -262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -262, 0, -262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -262, -262, 0, 0, 0, 0, 0,
        // State 295
        0, -266, -266, 0, -266, -266, 0, -266, -266, -266, 0, -266, 0, 0, -266, -266, 0, 0, 0, 0, 0, -266, 0, -266, -266, -266, -266, 0, -266, 0, -266, -266, -266, -266, 0, -266, 0, -266, -266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -266, 0, -266, -266, 0, 0, 0, 0, 0,
        // State 296
        0, -264, -264, 0, -264, -264, 0, -264, -264, -264, 0, -264, 0, 0, -264, -264, 0, 0, 0, 0, 0, -264, 0, -264, -264, -264, -264, 0, -264, 0, -264, -264, -264, -264, 0, -264, 0, -264, -264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -264, 0, -264, -264, 0, 0, 0, 0, 0,
        // State 297
        0, -265, -265, 0, -265, -265, 0, -265, -265, -265, 0, -265, 0, 0, -265, -265, 0, 0, 0, 0, 0, -265, 0, -265, -265, -265, -265, 0, -265, 0, -265, -265, -265, -265, 0, -265, 0, -265, -265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -265, 0, -265, -265, 0, 0, 0, 0, 0,
        // State 298
        0, -299, 0, 0, -299, -299, 0, -299, -299, 0, 0, 0, 0, 0, -299, 0, 0, 0, 0, 0, 0, 0, 0, -299, -299, -299, 65, 0, -299, 0, -299, -299, -299, 66, 0, -299, 0, -299, -299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -299, 0, -299, -299, 0, 0, 0, 0, 0,
        // State 299
        0, -301, 0, 0, -301, -301, 0, -301, -301, 0, 0, 0, 0, 0, -301, 0, 0, 0, 0, 0, 0, 0, 0, -301, -301, -301, 65, 0, -301, 0, -301, -301, -301, 66, 0, -301, 0, -301, -301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -301, 0, -301, -301, 0, 0, 0, 0, 0,
        // State 300
        0, -300, 0, 0, -300, -300, 0, -300, -300, 0, 0, 0, 0, 0, -300, 0, 0, 0, 0, 0, 0, 0, 0, -300, -300, -300, 65, 0, -300, 0, -300, -300, -300, 66, 0, -300, 0, -300, -300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -300, 0, -300, -300, 0, 0, 0, 0, 0,
        // State 301
        0, -302, 0, 0, -302, -302, 0, -302, -302, 0, 0, 0, 0, 0, -302, 0, 0, 0, 0, 0, 0, 0, 0, -302, -302, -302, 65, 0, -302, 0, -302, -302, -302, 66, 0, -302, 0, -302, -302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -302, 0, -302, -302, 0, 0, 0, 0, 0,
        // State 302
        0, -306, 0, 0, -306, -306, 0, -306, -306, 0, 0, 48, 0, 0, -306, 49, 0, 0, 0, 0, 0, 0, 0, -306, -306, -306, -306, 0, -306, 0, -306, -306, -306, -306, 0, -306, 0, -306, -306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -306, 0, -306, -306, 0, 0, 0, 0, 0,
        // State 303
        0, -307, 0, 0, -307, -307, 0, -307, -307, 0, 0, 48, 0, 0, -307, 49, 0, 0, 0, 0, 0, 0, 0, -307, -307, -307, -307, 0, -307, 0, -307, -307, -307, -307, 0, -307, 0, -307, -307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -307, 0, -307, -307, 0, 0, 0, 0, 0,
        // State 304
        0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, -84, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0,
        // State 305
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 306
        0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 307
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
        // State 308
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, 0,
        // State 309
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 310
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 311
        0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, -15, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 312
        0, 0, 0, 0, 0, 0, 0, -256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -256, -256, -256, 0, 0, 0, -256, 0, 0, -256, -256, -256, 0, -256, -256, -256, -256, 0, 0, 0, -256, -256, -256, -256, 0, -256, -256, 0, 0, -256, -256, -256, 0, 0, -256, -256, -256, -256, -256, -256, 0, -256, 0, 0, 0, 0, -256, 0, 0, -256, 0, -256,
        // State 313
        0, 0, 0, 0, 0, 0, 0, -258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -258, -258, -258, 0, 0, 0, -258, 0, 0, -258, -258, -258, 0, -258, -258, -258, -258, 0, 0, 0, -258, -258, -258, -258, 0, -258, -258, 0, 0, -258, -258, -258, 0, 0, -258, -258, -258, -258, -258, -258, 0, -258, 0, 0, 0, 0, -258, 0, 0, -258, 0, -258,
        // State 314
        0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 315
        0, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 316
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 317
        0, 0, 0, 0, 0, 0, 0, -251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -251, -251, -251, 0, 0, 0, -251, 0, 0, -251, -251, -251, 0, -251, -251, -251, -251, 0, 0, 0, -251, -251, -251, -251, 0, -251, -251, 0, 0, -251, -251, -251, 0, 0, -251, -251, -251, -251, -251, -251, 0, -251, 0, 0, 0, 0, -251, 0, 0, -251, 0, -251,
        // State 318
        0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 319
        0, 0, 0, 0, 0, 0, 0, -254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -254, -254, -254, 0, 0, 0, -254, 0, 0, -254, -254, -254, 0, -254, -254, -254, -254, 0, 0, 0, -254, -254, -254, -254, 0, -254, -254, 0, 0, -254, -254, -254, 0, 0, -254, -254, -254, -254, -254, -254, 0, -254, 0, 0, 0, 0, -254, 0, 0, -254, 0, -254,
        // State 320
        0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 321
        0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 322
        0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 323
        0, 0, 0, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 324
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360, 0, 0,
        // State 325
        0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 326
        0, 0, 0, 0, 0, 0, 0, -160, -160, 0, 0, 0, 0, 0, -160, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, 0, 0, 0, -160, 0, 0, 0, 0, 0, 0, -160, 0, 0, 0, 0, 0, -160, -160, -160, 0, 0, 0, -160, 0, 0, 0, 0, -160, 0, 0, 0, 0, -160, 0, 0, 0, -160, 0, 0, 0, 0, -160, -160, 0, 0, 0, -160, -160, 0, 0, -160, 0, -160, -160, -160, -160, 0, 0, -160, 0, 0, 0, 0, 0, 0, 0, 0, -160,
        // State 327
        0, 0, 0, 0, 0, 0, 0, -167, -167, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, -167, -167, -167, 0, 0, 0, -167, 0, 0, 0, 0, -167, 0, 0, 0, 0, -167, 0, 0, 0, -167, 0, 0, 0, 0, -167, -167, 0, 0, 0, -167, -167, 0, 0, -167, 0, -167, -167, -167, -167, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, -167,
        // State 328
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 329
        0, 0, 0, 0, 0, 0, 0, -165, -165, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, -165, -165, -165, 0, 0, 0, -165, 0, 0, 0, 0, -165, 0, 0, 0, 0, -165, 0, 0, 0, -165, 0, 0, 0, 0, -165, -165, 0, 0, 0, -165, -165, 0, 0, -165, 0, -165, -165, -165, -165, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, -165,
        // State 330
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 331
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 332
        0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 333
        0, 0, 0, 0, 0, 0, 0, -153, -153, 0, 0, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 334
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 335
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 336
        0, 0, 0, 0, 0, 0, 0, -142, -142, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 337
        0, 0, 0, 0, 0, 0, 0, -135, -135, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 338
        0, 0, 0, 0, 0, 0, 0, -154, -154, 0, 0, 0, 0, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 339
        0, 0, 0, 0, 0, 0, 0, -141, -141, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 340
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 341
        0, 0, 0, 0, 0, 0, 0, -139, -139, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 342
        0, 0, 0, 0, 0, 0, 0, -151, -151, 0, 0, 0, 0, 0, -151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 343
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 344
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 345
        0, 51, 0, 0, -78, -78, 0, 0, -78, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, -78, -78, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, -78, 0, -78, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, -78, -78, 0, 0, 0, 0, 0,
        // State 346
        0, -106, -106, 0, -106, -106, 0, -106, -106, -106, 0, -106, 0, 0, -106, -106, 0, 0, 0, 0, 0, -106, 0, -106, -106, -106, -106, 0, -106, 0, -106, -106, -106, -106, 0, -106, 0, -106, -106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -106, 0, -106, -106, 0, 0, 0, 0, 0,
        // State 347
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376, 0, 0, 0, 0, 0,
        // State 348
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0,
        // State 349
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0,
        // State 350
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0,
        // State 351
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0,
        // State 352
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 353
        0, 0, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, -16, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 354
        0, 0, 0, 0, 0, 0, 0, -257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -257, -257, -257, 0, 0, 0, -257, 0, 0, -257, -257, -257, 0, -257, -257, -257, -257, 0, 0, 0, -257, -257, -257, -257, 0, -257, -257, 0, 0, -257, -257, -257, 0, 0, -257, -257, -257, -257, -257, -257, 0, -257, 0, 0, 0, 0, -257, 0, 0, -257, 0, -257,
        // State 355
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 356
        0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 357
        0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 358
        0, 0, 0, 0, 0, 0, 0, 0, -273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 359
        0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 360
        0, 0, 0, 0, 0, 0, 0, -166, -166, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, -166, -166, -166, 0, 0, 0, -166, 0, 0, 0, 0, -166, 0, 0, 0, 0, -166, 0, 0, 0, -166, 0, 0, 0, 0, -166, -166, 0, 0, 0, -166, -166, 0, 0, -166, 0, -166, -166, -166, -166, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, -166,
        // State 361
        0, 0, 0, 0, 0, 0, 0, -164, -164, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, -164, -164, -164, 0, 0, 0, -164, 0, 0, 0, 0, -164, 0, 0, 0, 0, -164, 0, 0, 0, -164, 0, 0, 0, 0, -164, -164, 0, 0, 0, -164, -164, 0, 0, -164, 0, -164, -164, -164, -164, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, -164,
        // State 362
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 363
        0, 0, 0, 0, 0, 0, 0, -152, -152, 0, 0, 0, 0, 0, -152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 364
        0, 0, 0, 0, 0, 0, 0, -140, -140, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 365
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 366
        0, 0, 0, 0, 0, 0, 0, -138, -138, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 367
        0, 0, 0, 0, 0, 0, 0, -150, -150, 0, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 368
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 369
        0, 0, 0, 0, 0, 0, 0, -137, -137, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 370
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 371
        0, 0, 0, 0, 0, 0, 0, -147, -147, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 372
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 373
        0, 0, 0, 0, 0, 0, 0, -314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -314, -314, -314, 0, 0, 0, -314, 0, 0, -314, -314, -314, 0, -314, -314, -314, -314, 0, 0, 0, -314, -314, -314, -314, 0, -314, -314, 0, 0, -314, -314, -314, 0, 0, -314, -314, -314, -314, -314, -314, 0, -314, -314, 0, 0, 0, -314, 0, 0, -314, 0, -314,
        // State 374
        0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, -110, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0,
        // State 375
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, 0,
        // State 376
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0,
        // State 377
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0,
        // State 378
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0,
        // State 379
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0,
        // State 380
        0, 0, 0, 0, 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 381
        0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 382
        0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 383
        0, 0, 0, 0, 0, 0, 0, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -250, -250, -250, 0, 0, 0, -250, 0, 0, -250, -250, -250, 0, -250, -250, -250, -250, 0, 0, 0, -250, -250, -250, -250, 0, -250, -250, 0, 0, -250, -250, -250, 0, 0, -250, -250, -250, -250, -250, -250, 0, -250, 0, 0, 0, 0, -250, 0, 0, -250, 0, -250,
        // State 384
        0, 0, 0, 0, 0, 0, 0, -303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -303, -303, -303, 0, 0, 0, -303, 0, 0, -303, -303, -303, 0, -303, -303, -303, -303, 0, 0, 0, -303, -303, -303, -303, 0, -303, -303, 0, 0, -303, -303, -303, 0, 0, -303, -303, -303, -303, -303, -303, 0, -303, 0, 0, 0, 0, -303, 0, 0, -303, 0, -303,
        // State 385
        0, 0, 0, 0, 0, 0, 0, -304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -304, -304, -304, 0, 0, 0, -304, 0, 0, -304, -304, -304, 0, -304, -304, -304, -304, 0, 0, 0, -304, -304, -304, -304, 0, -304, -304, 0, 0, -304, -304, -304, 0, 0, -304, -304, -304, -304, -304, -304, 0, -304, 0, 0, 0, 0, -304, 0, 0, -304, 0, -304,
        // State 386
        0, 0, 0, 0, 0, 0, 0, -241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -241, -241, -241, 0, 0, 0, -241, 0, 0, -241, -241, -241, 0, -241, -241, -241, -241, 0, 0, 0, -241, -241, -241, -241, 0, -241, -241, 0, 0, -241, -241, -241, 0, 0, -241, -241, -241, -241, -241, -241, 0, -241, 0, 0, 0, 0, -241, 0, 0, -241, 0, -241,
        // State 387
        0, 0, 0, 0, 0, 0, 0, -136, -136, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 388
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 389
        0, 0, 0, 0, 0, 0, 0, -146, -146, 0, 0, 0, 0, 0, -146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 390
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 391
        0, 0, 0, 0, 0, 0, 0, -149, -149, 0, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 392
        0, 0, 0, 0, 0, 0, 0, -145, -145, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 393
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0,
        // State 394
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0,
        // State 395
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 396
        0, 0, 0, 0, 0, 0, 0, -246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -246, -246, -246, 0, 0, 0, -246, 0, 0, -246, -246, -246, 0, -246, -246, -246, -246, 0, 0, 0, -246, -246, -246, -246, 0, -246, -246, 0, 0, -246, -246, -246, 0, 0, -246, -246, -246, -246, -246, -246, 0, -246, 0, 0, 0, 0, -246, 0, 0, -246, 0, -246,
        // State 397
        0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 398
        0, 0, 0, 0, 0, 0, 0, -249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -249, -249, -249, 0, 0, 0, -249, 0, 0, -249, -249, -249, 0, -249, -249, -249, -249, 0, 0, 0, -249, -249, -249, -249, 0, -249, -249, 0, 0, -249, -249, -249, 0, 0, -249, -249, -249, -249, -249, -249, 0, -249, 0, 0, 0, 0, -249, 0, 0, -249, 0, -249,
        // State 399
        0, 0, 0, 0, 0, 0, 0, -248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -248, -248, -248, 0, 0, 0, -248, 0, 0, -248, -248, -248, 0, -248, -248, -248, -248, 0, 0, 0, -248, -248, -248, -248, 0, -248, -248, 0, 0, -248, -248, -248, 0, 0, -248, -248, -248, -248, -248, -248, 0, -248, 0, 0, 0, 0, -248, 0, 0, -248, 0, -248,
        // State 400
        0, 0, 0, 0, 0, 0, 0, -148, -148, 0, 0, 0, 0, 0, -148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 401
        0, 0, 0, 0, 0, 0, 0, -144, -144, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 402
        0, 0, 0, 0, 0, 0, 0, -242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -242, -242, -242, 0, 0, 0, -242, 0, 0, -242, -242, -242, 0, -242, -242, -242, -242, 0, 0, 0, -242, -242, -242, -242, 0, -242, -242, 0, 0, -242, -242, -242, 0, 0, -242, -242, -242, -242, -242, -242, 0, -242, 0, 0, 0, 0, -242, 0, 0, -242, 0, -242,
        // State 403
        0, 0, 0, 0, 0, 0, 0, -244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -244, -244, -244, 0, 0, 0, -244, 0, 0, -244, -244, -244, 0, -244, -244, -244, -244, 0, 0, 0, -244, -244, -244, -244, 0, -244, -244, 0, 0, -244, -244, -244, 0, 0, -244, -244, -244, -244, -244, -244, 0, -244, 0, 0, 0, 0, -244, 0, 0, -244, 0, -244,
        // State 404
        0, 0, 0, 0, 0, 0, 0, -245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -245, -245, -245, 0, 0, 0, -245, 0, 0, -245, -245, -245, 0, -245, -245, -245, -245, 0, 0, 0, -245, -245, -245, -245, 0, -245, -245, 0, 0, -245, -245, -245, 0, 0, -245, -245, -245, -245, -245, -245, 0, -245, 0, 0, 0, 0, -245, 0, 0, -245, 0, -245,
        // State 405
        0, 0, 0, 0, 0, 0, 0, -247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -247, -247, -247, 0, 0, 0, -247, 0, 0, -247, -247, -247, 0, -247, -247, -247, -247, 0, 0, 0, -247, -247, -247, -247, 0, -247, -247, 0, 0, -247, -247, -247, 0, 0, -247, -247, -247, -247, -247, -247, 0, -247, 0, 0, 0, 0, -247, 0, 0, -247, 0, -247,
        // State 406
        0, 0, 0, 0, 0, 0, 0, -243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -243, -243, -243, 0, 0, 0, -243, 0, 0, -243, -243, -243, 0, -243, -243, -243, -243, 0, 0, 0, -243, -243, -243, -243, 0, -243, -243, 0, 0, -243, -243, -243, 0, 0, -243, -243, -243, -243, -243, -243, 0, -243, 0, 0, 0, 0, -243, 0, 0, -243, 0, -243,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 94 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -334,
        // State 1
        0,
        // State 2
        0,
        // State 3
        -335,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        -197,
        // State 128
        0,
        // State 129
        -200,
        // State 130
        -196,
        // State 131
        -114,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        -361,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        -113,
        // State 159
        0,
        // State 160
        -201,
        // State 161
        0,
        // State 162
        -206,
        // State 163
        0,
        // State 164
        0,
        // State 165
        -112,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        0,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        0,
        // State 193
        -205,
        // State 194
        0,
        // State 195
        0,
        // State 196
        0,
        // State 197
        0,
        // State 198
        0,
        // State 199
        0,
        // State 200
        0,
        // State 201
        0,
        // State 202
        0,
        // State 203
        0,
        // State 204
        0,
        // State 205
        0,
        // State 206
        0,
        // State 207
        0,
        // State 208
        0,
        // State 209
        0,
        // State 210
        0,
        // State 211
        0,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        -107,
        // State 216
        0,
        // State 217
        0,
        // State 218
        0,
        // State 219
        0,
        // State 220
        0,
        // State 221
        0,
        // State 222
        0,
        // State 223
        0,
        // State 224
        0,
        // State 225
        0,
        // State 226
        0,
        // State 227
        0,
        // State 228
        0,
        // State 229
        0,
        // State 230
        0,
        // State 231
        0,
        // State 232
        0,
        // State 233
        0,
        // State 234
        0,
        // State 235
        0,
        // State 236
        0,
        // State 237
        0,
        // State 238
        0,
        // State 239
        0,
        // State 240
        0,
        // State 241
        0,
        // State 242
        0,
        // State 243
        0,
        // State 244
        0,
        // State 245
        0,
        // State 246
        0,
        // State 247
        0,
        // State 248
        0,
        // State 249
        0,
        // State 250
        0,
        // State 251
        0,
        // State 252
        -108,
        // State 253
        0,
        // State 254
        0,
        // State 255
        0,
        // State 256
        0,
        // State 257
        0,
        // State 258
        0,
        // State 259
        0,
        // State 260
        0,
        // State 261
        0,
        // State 262
        0,
        // State 263
        0,
        // State 264
        0,
        // State 265
        0,
        // State 266
        0,
        // State 267
        0,
        // State 268
        0,
        // State 269
        0,
        // State 270
        0,
        // State 271
        0,
        // State 272
        0,
        // State 273
        0,
        // State 274
        0,
        // State 275
        0,
        // State 276
        0,
        // State 277
        0,
        // State 278
        0,
        // State 279
        0,
        // State 280
        0,
        // State 281
        0,
        // State 282
        0,
        // State 283
        0,
        // State 284
        0,
        // State 285
        0,
        // State 286
        0,
        // State 287
        0,
        // State 288
        0,
        // State 289
        0,
        // State 290
        0,
        // State 291
        0,
        // State 292
        0,
        // State 293
        0,
        // State 294
        0,
        // State 295
        0,
        // State 296
        0,
        // State 297
        0,
        // State 298
        0,
        // State 299
        0,
        // State 300
        0,
        // State 301
        0,
        // State 302
        0,
        // State 303
        0,
        // State 304
        0,
        // State 305
        0,
        // State 306
        0,
        // State 307
        0,
        // State 308
        0,
        // State 309
        0,
        // State 310
        0,
        // State 311
        0,
        // State 312
        0,
        // State 313
        0,
        // State 314
        0,
        // State 315
        0,
        // State 316
        0,
        // State 317
        0,
        // State 318
        0,
        // State 319
        0,
        // State 320
        0,
        // State 321
        0,
        // State 322
        0,
        // State 323
        0,
        // State 324
        0,
        // State 325
        0,
        // State 326
        0,
        // State 327
        0,
        // State 328
        0,
        // State 329
        0,
        // State 330
        0,
        // State 331
        0,
        // State 332
        0,
        // State 333
        0,
        // State 334
        0,
        // State 335
        0,
        // State 336
        0,
        // State 337
        0,
        // State 338
        0,
        // State 339
        0,
        // State 340
        0,
        // State 341
        0,
        // State 342
        0,
        // State 343
        0,
        // State 344
        0,
        // State 345
        0,
        // State 346
        0,
        // State 347
        0,
        // State 348
        0,
        // State 349
        0,
        // State 350
        0,
        // State 351
        0,
        // State 352
        0,
        // State 353
        0,
        // State 354
        0,
        // State 355
        0,
        // State 356
        0,
        // State 357
        0,
        // State 358
        0,
        // State 359
        0,
        // State 360
        0,
        // State 361
        0,
        // State 362
        0,
        // State 363
        0,
        // State 364
        0,
        // State 365
        0,
        // State 366
        0,
        // State 367
        0,
        // State 368
        0,
        // State 369
        0,
        // State 370
        0,
        // State 371
        0,
        // State 372
        0,
        // State 373
        -314,
        // State 374
        0,
        // State 375
        0,
        // State 376
        0,
        // State 377
        0,
        // State 378
        0,
        // State 379
        0,
        // State 380
        0,
        // State 381
        0,
        // State 382
        0,
        // State 383
        0,
        // State 384
        0,
        // State 385
        0,
        // State 386
        0,
        // State 387
        0,
        // State 388
        0,
        // State 389
        0,
        // State 390
        0,
        // State 391
        0,
        // State 392
        0,
        // State 393
        0,
        // State 394
        0,
        // State 395
        0,
        // State 396
        0,
        // State 397
        0,
        // State 398
        0,
        // State 399
        0,
        // State 400
        0,
        // State 401
        0,
        // State 402
        0,
        // State 403
        0,
        // State 404
        0,
        // State 405
        0,
        // State 406
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 155,
            7 => 250,
            10 => match state {
                91 => 347,
                _ => 307,
            },
            19 => 266,
            22 => 164,
            25 => 264,
            28 => 274,
            35 => match state {
                26 => 232,
                37 => 261,
                _ => 278,
            },
            37 => match state {
                64 => 302,
                65 => 303,
                _ => 178,
            },
            39 => match state {
                27 => 235,
                52 => 290,
                _ => 179,
            },
            42 => match state {
                16 | 30 | 67 | 92 | 104..=106 | 116..=117 => 195,
                19 => 220,
                40 => 269,
                41 => 272,
                46 => 281,
                66 => 304,
                72 => 311,
                82 => 328,
                83 => 330,
                86 => 334,
                87 => 340,
                88 => 343,
                93 => 353,
                99 => 365,
                100 => 368,
                101 => 370,
                102 => 372,
                114 => 388,
                115 => 390,
                _ => 31,
            },
            44 => 66,
            45 => 126,
            46 => match state {
                32 => 251,
                _ => 198,
            },
            48 => 32,
            49 => match state {
                57 => 295,
                58 => 296,
                59 => 297,
                90 => 346,
                _ => 180,
            },
            50 => match state {
                14 => 193,
                _ => 162,
            },
            51 => match state {
                11 | 33 | 71 => 181,
                103 => 374,
                _ => 196,
            },
            52 => match state {
                33 => 255,
                71 => 310,
                _ => 182,
            },
            53 => match state {
                4 => 163,
                13 => 192,
                17 | 32 => 199,
                75 => 315,
                _ => 127,
            },
            54 => 13,
            55 => 14,
            57 => match state {
                1 => 154,
                _ => 128,
            },
            58 => 1,
            59 => match state {
                0 | 3 => 2,
                18 | 45 | 80..=81 | 85 | 97 => 37,
                _ => 15,
            },
            60 => match state {
                2 => 4,
                7 | 80 => 167,
                22 | 84 | 98 => 225,
                37 => 262,
                _ => 194,
            },
            61 => match state {
                30 => 67,
                105 | 116 => 117,
                _ => 106,
            },
            63 => match state {
                68 => 305,
                _ => 248,
            },
            64 => 68,
            65 => 249,
            66 => match state {
                44 | 79 => 277,
                _ => 233,
            },
            68 => match state {
                6 | 79 => 166,
                _ => 156,
            },
            73 => match state {
                89 => 345,
                _ => 27,
            },
            74 => match state {
                53 => 291,
                _ => 183,
            },
            75 => match state {
                36 => 259,
                55 => 293,
                75 => 316,
                76 => 318,
                77 => 320,
                78 => 321,
                95 => 355,
                96 => 356,
                107 => 380,
                108 => 381,
                109 => 382,
                119 => 397,
                _ => 200,
            },
            77 => 201,
            78 => match state {
                3 => 160,
                _ => 129,
            },
            80 => 3,
            81 => 95,
            83 => 130,
            89 => 217,
            91 => match state {
                54 => 292,
                _ => 184,
            },
            92 => match state {
                20 => 222,
                42 => 273,
                _ => 5,
            },
            93 => 157,
            95 => match state {
                30 => 69,
                67 => 91,
                16 => 197,
                105 | 116 => 377,
                106 => 379,
                117 => 394,
                _ => 350,
            },
            97 => 202,
            98 => 203,
            99 => 204,
            100 => match state {
                56 => 294,
                _ => 185,
            },
            101 => 186,
            102 => match state {
                47 => 284,
                48 => 285,
                _ => 187,
            },
            103 => match state {
                81 => 322,
                97 => 357,
                _ => 38,
            },
            105 => match state {
                18 => 218,
                85 => 332,
                _ => 279,
            },
            107 => match state {
                26 | 45 => 44,
                37 | 80 => 79,
                _ => 6,
            },
            111 => match state {
                50 => 288,
                51 => 289,
                _ => 188,
            },
            112 => 205,
            113 => match state {
                60 => 298,
                61 => 299,
                62 => 300,
                63 => 301,
                _ => 189,
            },
            114 => match state {
                10 | 28 => 26,
                _ => 22,
            },
            115 => match state {
                34 => 257,
                73 => 312,
                74 => 313,
                94 => 354,
                110 => 383,
                111 => 384,
                112 => 385,
                113 => 386,
                118 => 396,
                120 => 398,
                121 => 399,
                122 => 403,
                123 => 404,
                124 => 405,
                125 => 406,
                _ => 206,
            },
            116 => match state {
                9 | 23 | 25 => 174,
                _ => 131,
            },
            117 => 132,
            118 => match state {
                35 => 258,
                70 => 309,
                _ => 207,
            },
            119 => 286,
            120 => match state {
                23 => 228,
                _ => 175,
            },
            121 => 23,
            122 => match state {
                25 => 231,
                _ => 176,
            },
            123 => match state {
                84 => 331,
                98 => 362,
                _ => 43,
            },
            124 => 226,
            126 => 133,
            127 => 134,
            128 => 135,
            129 => match state {
                28 => 236,
                _ => 177,
            },
            130 => match state {
                21 => 224,
                24 => 230,
                _ => 168,
            },
            131 => 21,
            132 => match state {
                41 => 83,
                46 => 87,
                86 => 99,
                88 => 102,
                100 => 115,
                8 => 169,
                12 => 191,
                _ => 40,
            },
            134 => match state {
                9..=10 | 23 | 25 | 28 => 24,
                _ => 136,
            },
            135 => match state {
                11 | 27 | 33 | 47..=48 | 50..=54 | 56..=65 | 71 | 89..=90 | 103 => 190,
                _ => 29,
            },
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""%""###,
            r###""%=""###,
            r###""&""###,
            r###""&&""###,
            r###""&=""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""*=""###,
            r###""+""###,
            r###""++""###,
            r###""+=""###,
            r###"",""###,
            r###""-""###,
            r###""--""###,
            r###""-=""###,
            r###""->""###,
            r###"".""###,
            r###""...""###,
            r###""/""###,
            r###""/=""###,
            r###"":""###,
            r###"";""###,
            r###""<""###,
            r###""<<""###,
            r###""<<=""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###"">>""###,
            r###"">>=""###,
            r###""?""###,
            r###""[""###,
            r###""]""###,
            r###""^""###,
            r###""^=""###,
            r###""_Alignas""###,
            r###""_Alignof""###,
            r###""_Atomic""###,
            r###""_Bool""###,
            r###""_Complex""###,
            r###""_Generic""###,
            r###""_Imaginary""###,
            r###""_Noreturn""###,
            r###""_Static_assert""###,
            r###""_Thread_local""###,
            r###""auto""###,
            r###""break""###,
            r###""case""###,
            r###""char""###,
            r###""const""###,
            r###""continue""###,
            r###""default""###,
            r###""do""###,
            r###""double""###,
            r###""else""###,
            r###""enum""###,
            r###""extern""###,
            r###""float""###,
            r###""for""###,
            r###""goto""###,
            r###""if""###,
            r###""inline""###,
            r###""int""###,
            r###""long""###,
            r###""register""###,
            r###""restrict""###,
            r###""return""###,
            r###""short""###,
            r###""signed""###,
            r###""sizeof""###,
            r###""static""###,
            r###""struct""###,
            r###""switch""###,
            r###""typedef""###,
            r###""union""###,
            r###""unsigned""###,
            r###""void""###,
            r###""volatile""###,
            r###""while""###,
            r###""{""###,
            r###""|""###,
            r###""|=""###,
            r###""||""###,
            r###""}""###,
            r###""~""###,
            r###"Constant"###,
            r###"Identifier"###,
            r###"StringLiteral"###,
            r###"TypedefName"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'input>
    where 
    {
        input: &'input str,
        __phantom: ::std::marker::PhantomData<(&'input ())>,
    }
    impl<'input> __state_machine::ParserDefinition for __StateMachine<'input>
    where 
    {
        type Location = usize;
        type Error = lexer::ParserError;
        type Token = lexer::Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = ast::Ast;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 94 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &lexer::Token,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            lexer::Token::ExclamationMark if true => Some(0),
            lexer::Token::NotEq if true => Some(1),
            lexer::Token::Percent if true => Some(2),
            lexer::Token::PercentAssign if true => Some(3),
            lexer::Token::Ampersand if true => Some(4),
            lexer::Token::WAmpersand if true => Some(5),
            lexer::Token::AmpersandAssign if true => Some(6),
            lexer::Token::LParenthesis if true => Some(7),
            lexer::Token::RParenthesis if true => Some(8),
            lexer::Token::Asterisk if true => Some(9),
            lexer::Token::AsteriskAssign if true => Some(10),
            lexer::Token::Plus if true => Some(11),
            lexer::Token::TwoPluses if true => Some(12),
            lexer::Token::PlusAssign if true => Some(13),
            lexer::Token::Comma if true => Some(14),
            lexer::Token::Minus if true => Some(15),
            lexer::Token::TwoMinuses if true => Some(16),
            lexer::Token::MinusWHyphen if true => Some(17),
            lexer::Token::Arrow if true => Some(18),
            lexer::Token::Dot if true => Some(19),
            lexer::Token::ThreeDots if true => Some(20),
            lexer::Token::Slash if true => Some(21),
            lexer::Token::SlashAssign if true => Some(22),
            lexer::Token::Colon if true => Some(23),
            lexer::Token::Semicolon if true => Some(24),
            lexer::Token::Smaller if true => Some(25),
            lexer::Token::TwoSmaller if true => Some(26),
            lexer::Token::LGuillemetsAssign if true => Some(27),
            lexer::Token::LeOrEq if true => Some(28),
            lexer::Token::Assign if true => Some(29),
            lexer::Token::Equal if true => Some(30),
            lexer::Token::Lager if true => Some(31),
            lexer::Token::GeOrEq if true => Some(32),
            lexer::Token::TwoLager if true => Some(33),
            lexer::Token::RGuillemetsAssign if true => Some(34),
            lexer::Token::QuestionMark if true => Some(35),
            lexer::Token::LBracket if true => Some(36),
            lexer::Token::RBracket if true => Some(37),
            lexer::Token::Caret if true => Some(38),
            lexer::Token::CaretAssign if true => Some(39),
            lexer::Token::Alignas if true => Some(40),
            lexer::Token::Alignof if true => Some(41),
            lexer::Token::Atomic if true => Some(42),
            lexer::Token::Bool if true => Some(43),
            lexer::Token::Complex if true => Some(44),
            lexer::Token::Generic if true => Some(45),
            lexer::Token::Imaginary if true => Some(46),
            lexer::Token::Noreturn if true => Some(47),
            lexer::Token::StaticAssert if true => Some(48),
            lexer::Token::ThreadLocal if true => Some(49),
            lexer::Token::Auto if true => Some(50),
            lexer::Token::Break if true => Some(51),
            lexer::Token::Case if true => Some(52),
            lexer::Token::Char if true => Some(53),
            lexer::Token::Const if true => Some(54),
            lexer::Token::Continue if true => Some(55),
            lexer::Token::Default if true => Some(56),
            lexer::Token::Do if true => Some(57),
            lexer::Token::Double if true => Some(58),
            lexer::Token::Else if true => Some(59),
            lexer::Token::Enum if true => Some(60),
            lexer::Token::Extern if true => Some(61),
            lexer::Token::Float if true => Some(62),
            lexer::Token::For if true => Some(63),
            lexer::Token::Goto if true => Some(64),
            lexer::Token::If if true => Some(65),
            lexer::Token::Inline if true => Some(66),
            lexer::Token::Int if true => Some(67),
            lexer::Token::Long if true => Some(68),
            lexer::Token::Register if true => Some(69),
            lexer::Token::Restrict if true => Some(70),
            lexer::Token::Return if true => Some(71),
            lexer::Token::Short if true => Some(72),
            lexer::Token::Signed if true => Some(73),
            lexer::Token::Sizeof if true => Some(74),
            lexer::Token::Static if true => Some(75),
            lexer::Token::Struct if true => Some(76),
            lexer::Token::Switch if true => Some(77),
            lexer::Token::Typedef if true => Some(78),
            lexer::Token::Union if true => Some(79),
            lexer::Token::Unsigned if true => Some(80),
            lexer::Token::Void if true => Some(81),
            lexer::Token::Volatile if true => Some(82),
            lexer::Token::While if true => Some(83),
            lexer::Token::LBrace if true => Some(84),
            lexer::Token::Bar if true => Some(85),
            lexer::Token::VBarAssign if true => Some(86),
            lexer::Token::WBar if true => Some(87),
            lexer::Token::RBrace if true => Some(88),
            lexer::Token::Tilde if true => Some(89),
            lexer::Token::Arrow if true => Some(90),
            lexer::Token::Identifier if true => Some(91),
            lexer::Token::StringLiteral if true => Some(92),
            lexer::Token::TypedefName if true => Some(93),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: lexer::Token,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct TranslationUnitParser {
        _priv: (),
    }

    impl TranslationUnitParser {
        pub fn new() -> TranslationUnitParser {
            TranslationUnitParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            __TOKEN: __ToTriple<'input, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'input str,
            __tokens0: __TOKENS,
        ) -> Result<ast::Ast, __lalrpop_util::ParseError<usize, lexer::Token, lexer::ParserError>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    __phantom: ::std::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<ast::Ast,__lalrpop_util::ParseError<usize, lexer::Token, lexer::ParserError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            173 => {
                __reduce173(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            174 => {
                __reduce174(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            175 => {
                __reduce175(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            176 => {
                __reduce176(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            177 => {
                __reduce177(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            178 => {
                __reduce178(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            179 => {
                __reduce179(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            180 => {
                __reduce180(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            181 => {
                __reduce181(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            182 => {
                __reduce182(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            183 => {
                __reduce183(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            184 => {
                __reduce184(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            185 => {
                __reduce185(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            186 => {
                __reduce186(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            187 => {
                __reduce187(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            188 => {
                __reduce188(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            189 => {
                __reduce189(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            190 => {
                __reduce190(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            191 => {
                __reduce191(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            192 => {
                __reduce192(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            193 => {
                __reduce193(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            194 => {
                __reduce194(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            195 => {
                __reduce195(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            196 => {
                __reduce196(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            197 => {
                __reduce197(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            198 => {
                __reduce198(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            199 => {
                __reduce199(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            200 => {
                __reduce200(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            201 => {
                __reduce201(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            202 => {
                __reduce202(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            203 => {
                __reduce203(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            204 => {
                __reduce204(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            205 => {
                __reduce205(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            206 => {
                __reduce206(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            207 => {
                __reduce207(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            208 => {
                __reduce208(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            209 => {
                __reduce209(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            210 => {
                __reduce210(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            211 => {
                __reduce211(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            212 => {
                __reduce212(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            213 => {
                __reduce213(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            214 => {
                __reduce214(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            215 => {
                __reduce215(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            216 => {
                __reduce216(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            217 => {
                __reduce217(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            218 => {
                __reduce218(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            219 => {
                __reduce219(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            220 => {
                __reduce220(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            221 => {
                __reduce221(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            222 => {
                __reduce222(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            223 => {
                __reduce223(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            224 => {
                __reduce224(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            225 => {
                __reduce225(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            226 => {
                __reduce226(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            227 => {
                __reduce227(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            228 => {
                __reduce228(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            229 => {
                __reduce229(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            230 => {
                __reduce230(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            231 => {
                __reduce231(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            232 => {
                __reduce232(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            233 => {
                __reduce233(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            234 => {
                __reduce234(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            235 => {
                __reduce235(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            236 => {
                __reduce236(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            237 => {
                __reduce237(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            238 => {
                __reduce238(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            239 => {
                __reduce239(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            240 => {
                __reduce240(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            241 => {
                __reduce241(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            242 => {
                __reduce242(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            243 => {
                __reduce243(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            244 => {
                __reduce244(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            245 => {
                __reduce245(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            246 => {
                __reduce246(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            247 => {
                __reduce247(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            248 => {
                __reduce248(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            249 => {
                __reduce249(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            250 => {
                __reduce250(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            251 => {
                __reduce251(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            252 => {
                __reduce252(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            253 => {
                __reduce253(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            254 => {
                __reduce254(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            255 => {
                __reduce255(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            256 => {
                __reduce256(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            257 => {
                __reduce257(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            258 => {
                __reduce258(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            259 => {
                __reduce259(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            260 => {
                __reduce260(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            261 => {
                __reduce261(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            262 => {
                __reduce262(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            263 => {
                __reduce263(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            264 => {
                __reduce264(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            265 => {
                __reduce265(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            266 => {
                __reduce266(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            267 => {
                __reduce267(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            268 => {
                __reduce268(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            269 => {
                __reduce269(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            270 => {
                __reduce270(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            271 => {
                __reduce271(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            272 => {
                __reduce272(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            273 => {
                __reduce273(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            274 => {
                __reduce274(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            275 => {
                __reduce275(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            276 => {
                __reduce276(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            277 => {
                __reduce277(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            278 => {
                __reduce278(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            279 => {
                __reduce279(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            280 => {
                __reduce280(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            281 => {
                __reduce281(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            282 => {
                __reduce282(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            283 => {
                __reduce283(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            284 => {
                __reduce284(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            285 => {
                __reduce285(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            286 => {
                __reduce286(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            287 => {
                __reduce287(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            288 => {
                __reduce288(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            289 => {
                __reduce289(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            290 => {
                __reduce290(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            291 => {
                __reduce291(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            292 => {
                __reduce292(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            293 => {
                __reduce293(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            294 => {
                __reduce294(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            295 => {
                __reduce295(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            296 => {
                __reduce296(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            297 => {
                __reduce297(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            298 => {
                __reduce298(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            299 => {
                __reduce299(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            300 => {
                __reduce300(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            301 => {
                __reduce301(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            302 => {
                __reduce302(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            303 => {
                __reduce303(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            304 => {
                __reduce304(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            305 => {
                __reduce305(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            306 => {
                __reduce306(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            307 => {
                __reduce307(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            308 => {
                __reduce308(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            309 => {
                __reduce309(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            310 => {
                __reduce310(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            311 => {
                __reduce311(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            312 => {
                __reduce312(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            313 => {
                __reduce313(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            314 => {
                __reduce314(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            315 => {
                __reduce315(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            316 => {
                __reduce316(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            317 => {
                __reduce317(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            318 => {
                __reduce318(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            319 => {
                __reduce319(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            320 => {
                __reduce320(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            321 => {
                __reduce321(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            322 => {
                __reduce322(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            323 => {
                __reduce323(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            324 => {
                __reduce324(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            325 => {
                __reduce325(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            326 => {
                __reduce326(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            327 => {
                __reduce327(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            328 => {
                __reduce328(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            329 => {
                __reduce329(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            330 => {
                __reduce330(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            331 => {
                __reduce331(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            332 => {
                __reduce332(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            333 => {
                __reduce333(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            334 => {
                __reduce334(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            335 => {
                __reduce335(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            336 => {
                __reduce336(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            337 => {
                __reduce337(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            338 => {
                __reduce338(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            339 => {
                __reduce339(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            340 => {
                __reduce340(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            341 => {
                __reduce341(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            342 => {
                __reduce342(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            343 => {
                __reduce343(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            344 => {
                __reduce344(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            345 => {
                __reduce345(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            346 => {
                __reduce346(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            347 => {
                __reduce347(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            348 => {
                __reduce348(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            349 => {
                __reduce349(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            350 => {
                __reduce350(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            351 => {
                __reduce351(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            352 => {
                __reduce352(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            353 => {
                __reduce353(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            354 => {
                __reduce354(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            355 => {
                __reduce355(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            356 => {
                __reduce356(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            357 => {
                __reduce357(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            358 => {
                __reduce358(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            359 => {
                __reduce359(input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            360 => {
                // __TranslationUnit = TranslationUnit => ActionFn(0);
                let __sym0 = __pop_Variant83(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(input, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant84<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant84(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant73<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (decl::TypeSpecifier, decl::TypeQualifier), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant73(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, Vec<decl::Enumerator>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, decl::InitDeclarator), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, decl::ParameterDeclaration), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, decl::StructDeclarator), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, expr::Expression), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, expr::GenericAssociation), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, lexer::Token), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, lexer::Token, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), lexer::Token, lexer::Token, lexer::Token, expr::Expression, lexer::Token), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant61<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant61(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant75<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant75(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<decl::Designator>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<decl::Enumerator>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant51(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant64<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<decl::InitDeclarator>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant64(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant69<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<decl::ParameterDeclaration>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant69(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant79<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<decl::StructDeclarator>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant79(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant87<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<decl::TypeQualifier>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant87(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<expr::Expression>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant59<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<expr::GenericAssociation>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant59(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant83<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ast::Ast, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant83(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant53<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ast::ExternalDeclaration, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant53(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant57<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ast::FunctionDefinition, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant57(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::AbstractDeclarator, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::AtomicTypeSpecifier, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::Declaration, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::DeclarationSpecifier, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::Declarator, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::Designator, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::DirectAbstractDeclarator, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::DirectDeclarator, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant49(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::EnumSpecifier, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant50(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant58<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::FunctionSpecifier, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant58(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant63<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::InitDeclarator, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant63(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant66<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::Initializer, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant66(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant67<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::InitializerList, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant67(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant81<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::ObjKind, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant81(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant68<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::ParameterDeclaration, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant68(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant70<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::ParameterTypeList, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant70(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant74<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::StorageClassSpecifier, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant74(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant76<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::StructDeclaration, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant76(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant78<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::StructDeclarator, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant78(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant82<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::StructOrUnionSpecifier, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant82(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant85<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::TypeQualifier, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant85(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant89<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, decl::TypeSpecifier, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant89(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, expr::BiTag, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, expr::Expression, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant60<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, expr::GenericAssociation, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant60(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, lexer::Token, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, stmt::BlockItem, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, stmt::CompoundStmt, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant55<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, stmt::ForInit, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant55(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant52<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, stmt::Statement, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant52(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<(lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<(lexer::Token, expr::Expression)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<(lexer::Token, lexer::Token)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant62<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<(lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant62(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<Vec<decl::Designator>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant65<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<Vec<decl::InitDeclarator>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant65(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant80<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<Vec<decl::StructDeclarator>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant80(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant88<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<Vec<decl::TypeQualifier>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant88(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<Vec<expr::Expression>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<decl::AbstractDeclarator>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant71<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<decl::ParameterTypeList>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant71(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<expr::Expression>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<lexer::Token>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant56<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<stmt::ForInit>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant56(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant72<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant72(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::option::Option<::std::vec::Vec<decl::Declaration>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<(lexer::Token, expr::Expression)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<(lexer::Token, lexer::Token)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant54<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<ast::ExternalDeclaration>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant54(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<decl::Declaration>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<decl::Designator>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant77<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<decl::StructDeclaration>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant77(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant86<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<decl::TypeQualifier>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant86(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, ::std::vec::Vec<stmt::BlockItem>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ","? = "," => ActionFn(227);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action227::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ","? =  => ActionFn(228);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action228::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("*" TypeQualifierList?) = "*", TypeQualifierList => ActionFn(277);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant87(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action277::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("*" TypeQualifierList?) = "*" => ActionFn(278);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action278::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("*" TypeQualifierList?)+ = "*", TypeQualifierList => ActionFn(287);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant87(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action287::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("*" TypeQualifierList?)+ = "*" => ActionFn(288);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action288::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("*" TypeQualifierList?)+ = ("*" TypeQualifierList?)+, "*", TypeQualifierList => ActionFn(289);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant87(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action289::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("*" TypeQualifierList?)+ = ("*" TypeQualifierList?)+, "*" => ActionFn(290);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action290::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," "...") = ",", "..." => ActionFn(204);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action204::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," "...")? = ",", "..." => ActionFn(291);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action291::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," "...")? =  => ActionFn(203);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action203::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," AssignmentExpression) = ",", AssignmentExpression => ActionFn(175);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action175::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," AssignmentExpression)* =  => ActionFn(173);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action173::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," AssignmentExpression)* = ("," AssignmentExpression)+ => ActionFn(174);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action174::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," AssignmentExpression)+ = ",", AssignmentExpression => ActionFn(294);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action294::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," AssignmentExpression)+ = ("," AssignmentExpression)+, ",", AssignmentExpression => ActionFn(295);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action295::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Designation? Initializer) = ",", Designation, Initializer => ActionFn(300);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant66(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action300::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Designation? Initializer) = ",", Initializer => ActionFn(301);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant66(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action301::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Designation? Initializer)* =  => ActionFn(185);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action185::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Designation? Initializer)* = ("," Designation? Initializer)+ => ActionFn(186);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action186::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Designation? Initializer)+ = ",", Designation, Initializer => ActionFn(304);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant66(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action304::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Designation? Initializer)+ = ",", Initializer => ActionFn(305);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant66(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action305::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Designation? Initializer)+ = ("," Designation? Initializer)+, ",", Designation, Initializer => ActionFn(306);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant66(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action306::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (4, 10)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Designation? Initializer)+ = ("," Designation? Initializer)+, ",", Initializer => ActionFn(307);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant66(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action307::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Enumerator) = ",", Enumerator => ActionFn(223);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action223::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Enumerator)* =  => ActionFn(221);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action221::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Enumerator)* = ("," Enumerator)+ => ActionFn(222);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action222::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Enumerator)+ = ",", Enumerator => ActionFn(312);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action312::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Enumerator)+ = ("," Enumerator)+, ",", Enumerator => ActionFn(313);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant51(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action313::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," GenericAssociation) = ",", GenericAssociation => ActionFn(180);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant60(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action180::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," GenericAssociation)* =  => ActionFn(178);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action178::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," GenericAssociation)* = ("," GenericAssociation)+ => ActionFn(179);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action179::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," GenericAssociation)+ = ",", GenericAssociation => ActionFn(316);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant60(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action316::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," GenericAssociation)+ = ("," GenericAssociation)+, ",", GenericAssociation => ActionFn(317);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant60(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action317::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Identifier) = ",", Identifier => ActionFn(196);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action196::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Identifier)* =  => ActionFn(194);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action194::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 18)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Identifier)* = ("," Identifier)+ => ActionFn(195);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action195::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Identifier)+ = ",", Identifier => ActionFn(320);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action320::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," Identifier)+ = ("," Identifier)+, ",", Identifier => ActionFn(321);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action321::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," InitDeclarator) = ",", InitDeclarator => ActionFn(240);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action240::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," InitDeclarator)* =  => ActionFn(238);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action238::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 21)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," InitDeclarator)* = ("," InitDeclarator)+ => ActionFn(239);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action239::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," InitDeclarator)+ = ",", InitDeclarator => ActionFn(324);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action324::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 22)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," InitDeclarator)+ = ("," InitDeclarator)+, ",", InitDeclarator => ActionFn(325);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action325::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," ParameterDeclaration) = ",", ParameterDeclaration => ActionFn(201);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant68(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action201::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," ParameterDeclaration)* =  => ActionFn(199);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action199::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 24)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," ParameterDeclaration)* = ("," ParameterDeclaration)+ => ActionFn(200);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action200::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," ParameterDeclaration)+ = ",", ParameterDeclaration => ActionFn(328);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant68(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action328::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," ParameterDeclaration)+ = ("," ParameterDeclaration)+, ",", ParameterDeclaration => ActionFn(329);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant68(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action329::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," StructDeclarator) = ",", StructDeclarator => ActionFn(231);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant78(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action231::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," StructDeclarator)* =  => ActionFn(229);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action229::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," StructDeclarator)* = ("," StructDeclarator)+ => ActionFn(230);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action230::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," StructDeclarator)+ = ",", StructDeclarator => ActionFn(332);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant78(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action332::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," StructDeclarator)+ = ("," StructDeclarator)+, ",", StructDeclarator => ActionFn(333);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant78(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action333::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("=" ConstantExpression) = "=", ConstantExpression => ActionFn(220);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action220::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("=" ConstantExpression)? = "=", ConstantExpression => ActionFn(336);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action336::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 30)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("=" ConstantExpression)? =  => ActionFn(219);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action219::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("{" EnumeratorList ","? "}") = "{", Enumerator, ",", "}" => ActionFn(339);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action339::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (4, 31)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("{" EnumeratorList ","? "}") = "{", Enumerator, ("," Enumerator)+, ",", "}" => ActionFn(340);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action340::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (5, 31)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("{" EnumeratorList ","? "}") = "{", Enumerator, "}" => ActionFn(341);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action341::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 31)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("{" EnumeratorList ","? "}") = "{", Enumerator, ("," Enumerator)+, "}" => ActionFn(342);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action342::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (4, 31)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("{" EnumeratorList ","? "}")? = "{", Enumerator, ",", "}" => ActionFn(343);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action343::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (4, 32)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("{" EnumeratorList ","? "}")? = "{", Enumerator, ("," Enumerator)+, ",", "}" => ActionFn(344);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action344::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (5, 32)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("{" EnumeratorList ","? "}")? = "{", Enumerator, "}" => ActionFn(345);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action345::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (3, 32)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("{" EnumeratorList ","? "}")? = "{", Enumerator, ("," Enumerator)+, "}" => ActionFn(346);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action346::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (4, 32)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("{" EnumeratorList ","? "}")? =  => ActionFn(225);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action225::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 32)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(266);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action266::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 33)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(265);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action265::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AbstractDeclarator = Pointer => ActionFn(68);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AbstractDeclarator = Pointer, DirectAbstractDeclarator => ActionFn(448);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant47(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action448::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AbstractDeclarator = DirectAbstractDeclarator => ActionFn(449);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action449::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AbstractDeclarator? = AbstractDeclarator => ActionFn(197);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action197::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AbstractDeclarator? =  => ActionFn(198);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action198::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AdditiveExpression = MultiplicativeExpression => ActionFn(105);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AdditiveExpression = AdditiveExpression, "+", MultiplicativeExpression => ActionFn(106);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action106::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AdditiveExpression = AdditiveExpression, "-", MultiplicativeExpression => ActionFn(107);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action107::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AlignmentSpecifier = "_Alignas", "(", TypeName, ")", "_Alignas", "(", ConstantExpression, ")" => ActionFn(50);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant84(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action50::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (8, 38)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AndExpression = EqualityExpression, AndExpression, "&", EqualityExpression => ActionFn(119);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action119::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 39)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgumentExpressionList = AssignmentExpression => ActionFn(296);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action296::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgumentExpressionList = AssignmentExpression, ("," AssignmentExpression)+ => ActionFn(297);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action297::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgumentExpressionList? = ArgumentExpressionList => ActionFn(176);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action176::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgumentExpressionList? =  => ActionFn(177);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action177::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 41)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentExpression = ConditionalExpression => ActionFn(130);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action130::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentExpression = UnaryExpression, AssignmentOperator, AssignmentExpression => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 42)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentExpression? = AssignmentExpression => ActionFn(212);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action212::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentExpression? =  => ActionFn(213);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action213::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (0, 43)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "=" => ActionFn(132);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action132::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "*=" => ActionFn(133);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action133::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "/=" => ActionFn(134);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action134::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "%=" => ActionFn(135);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action135::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "+=" => ActionFn(136);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action136::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "-=" => ActionFn(137);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action137::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "<<=" => ActionFn(138);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action138::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = ">>=" => ActionFn(139);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action139::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "&=" => ActionFn(140);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action140::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "^=" => ActionFn(141);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action141::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AssignmentOperator = "|=" => ActionFn(142);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action142::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AtomicTypeSpecifier = "_Atomic", "(", TypeName, ")" => ActionFn(43);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant84(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action43::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (4, 45)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BlockItem = Declaration => ActionFn(151);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action151::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BlockItem = Statement => ActionFn(152);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action152::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BlockItem* =  => ActionFn(171);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action171::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 47)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BlockItem* = BlockItem+ => ActionFn(172);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action172::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BlockItem+ = BlockItem => ActionFn(271);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action271::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BlockItem+ = BlockItem+, BlockItem => ActionFn(272);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action272::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 48)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CastExpression = UnaryExpression => ActionFn(99);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action99::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CastExpression = "(", TypeName, ")", CastExpression => ActionFn(100);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant84(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action100::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 49)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CompoundStatement = "{", "}" => ActionFn(370);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action370::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 50)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CompoundStatement = "{", BlockItem+, "}" => ActionFn(371);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action371::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ConditionalExpression = LogicalOrExpression => ActionFn(128);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action128::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ConditionalExpression = LogicalOrExpression, "?", Expression, ":", ConditionalExpression => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 51)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ConstantExpression = ConditionalExpression => ActionFn(144);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action144::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Declaration = DeclarationSpecifiers, InitDeclaratorList, ";" => ActionFn(422);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant64(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action422::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (3, 53)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Declaration = DeclarationSpecifiers, ";" => ActionFn(423);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action423::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (2, 53)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Declaration = StaticAssertDeclaration => ActionFn(7);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Declaration+ = Declaration => ActionFn(247);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action247::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Declaration+ = Declaration+, Declaration => ActionFn(248);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant37(__symbols);
        let __sym0 = __pop_Variant38(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action248::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DeclarationList = Declaration+ => ActionFn(4);
        let __sym0 = __pop_Variant38(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DeclarationList? = DeclarationList => ActionFn(245);
        let __sym0 = __pop_Variant38(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action245::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DeclarationList? =  => ActionFn(246);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action246::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DeclarationSpecifier = StorageClassSpecifier => ActionFn(8);
        let __sym0 = __pop_Variant74(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DeclarationSpecifier = TypeSpecifier => ActionFn(9);
        let __sym0 = __pop_Variant89(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DeclarationSpecifier+ = DeclarationSpecifier => ActionFn(241);
        let __sym0 = __pop_Variant40(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action241::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DeclarationSpecifier+ = DeclarationSpecifier+, DeclarationSpecifier => ActionFn(242);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant40(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action242::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (2, 58)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DeclarationSpecifiers = DeclarationSpecifier+ => ActionFn(10);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Declarator = Pointer, DirectDeclarator => ActionFn(450);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant49(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action450::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (2, 60)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Declarator = DirectDeclarator => ActionFn(451);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action451::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Designation = DesignatorList, "=" => ActionFn(79);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action79::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (2, 61)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Designation? = Designation => ActionFn(188);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action188::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Designation? =  => ActionFn(189);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action189::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (0, 62)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Designator = "[", ConstantExpression, "]" => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (3, 63)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Designator = ".", Str<Identifier> => ActionFn(82);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant75(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action82::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Designator+ = Designator => ActionFn(183);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action183::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Designator+ = Designator+, Designator => ActionFn(184);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant45(__symbols);
        let __sym0 = __pop_Variant46(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action184::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (2, 64)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DesignatorList = Designator+ => ActionFn(80);
        let __sym0 = __pop_Variant46(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "(", AbstractDeclarator, ")" => ActionFn(70);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action70::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "[", TypeQualifierList, AssignmentExpression, "]" => ActionFn(374);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant87(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action374::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (5, 66)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "[", TypeQualifierList, AssignmentExpression, "]" => ActionFn(375);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant87(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action375::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (4, 66)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "[", TypeQualifierList, "]" => ActionFn(376);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant87(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action376::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (4, 66)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "[", TypeQualifierList, "]" => ActionFn(377);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant87(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action377::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "[", AssignmentExpression, "]" => ActionFn(378);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action378::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (4, 66)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "[", AssignmentExpression, "]" => ActionFn(379);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action379::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "[", "]" => ActionFn(380);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action380::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "[", "]" => ActionFn(381);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action381::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (2, 66)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "[", "static", TypeQualifierList, AssignmentExpression, "]" => ActionFn(382);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant87(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action382::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (6, 66)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "[", "static", TypeQualifierList, AssignmentExpression, "]" => ActionFn(383);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant87(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action383::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (5, 66)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "[", "static", AssignmentExpression, "]" => ActionFn(384);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action384::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (5, 66)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "[", "static", AssignmentExpression, "]" => ActionFn(385);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action385::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (4, 66)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "[", TypeQualifierList, "static", AssignmentExpression, "]" => ActionFn(386);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant87(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action386::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (6, 66)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "[", TypeQualifierList, "static", AssignmentExpression, "]" => ActionFn(387);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant87(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action387::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (5, 66)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "[", "*", "]" => ActionFn(388);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action388::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (4, 66)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "[", "*", "]" => ActionFn(389);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action389::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "(", ParameterTypeList, ")" => ActionFn(444);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant70(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action444::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (4, 66)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = DirectAbstractDeclarator, "(", ")" => ActionFn(445);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action445::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "(", ParameterTypeList, ")" => ActionFn(446);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant70(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action446::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator = "(", ")" => ActionFn(447);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action447::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (2, 66)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator? = DirectAbstractDeclarator => ActionFn(192);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action192::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectAbstractDeclarator? =  => ActionFn(193);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action193::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (0, 67)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = Identifier => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = "(", Declarator, ")" => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant42(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "[", TypeQualifierList, AssignmentExpression, "]" => ActionFn(366);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant87(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action366::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (5, 68)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "[", TypeQualifierList, "]" => ActionFn(367);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant87(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action367::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (4, 68)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "[", AssignmentExpression, "]" => ActionFn(368);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action368::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (4, 68)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "[", "]" => ActionFn(369);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action369::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "[", "static", TypeQualifierList, AssignmentExpression, "]" => ActionFn(285);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant87(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action285::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (6, 68)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "[", "static", AssignmentExpression, "]" => ActionFn(286);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action286::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (5, 68)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "[", TypeQualifierList, "static", AssignmentExpression, "]" => ActionFn(56);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant87(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action56::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (6, 68)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "[", TypeQualifierList, "*", "]" => ActionFn(57);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant87(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action57::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (5, 68)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "(", ParameterTypeList, ")" => ActionFn(58);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant70(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action58::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (4, 68)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "(", IdentifierList, ")" => ActionFn(420);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant61(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action420::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (4, 68)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectDeclarator = DirectDeclarator, "(", ")" => ActionFn(421);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action421::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum", Identifier, "{", Enumerator, ",", "}" => ActionFn(408);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant51(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action408::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (6, 69)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum", "{", Enumerator, ",", "}" => ActionFn(409);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant51(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action409::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (5, 69)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum", Identifier, "{", Enumerator, ("," Enumerator)+, ",", "}" => ActionFn(410);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant11(__symbols);
        let __sym3 = __pop_Variant51(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action410::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (7, 69)
    }
    pub(crate) fn __reduce173<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum", "{", Enumerator, ("," Enumerator)+, ",", "}" => ActionFn(411);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant51(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action411::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (6, 69)
    }
    pub(crate) fn __reduce174<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum", Identifier, "{", Enumerator, "}" => ActionFn(412);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant51(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action412::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (5, 69)
    }
    pub(crate) fn __reduce175<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum", "{", Enumerator, "}" => ActionFn(413);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant51(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action413::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (4, 69)
    }
    pub(crate) fn __reduce176<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum", Identifier, "{", Enumerator, ("," Enumerator)+, "}" => ActionFn(414);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant11(__symbols);
        let __sym3 = __pop_Variant51(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action414::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (6, 69)
    }
    pub(crate) fn __reduce177<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum", "{", Enumerator, ("," Enumerator)+, "}" => ActionFn(415);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant51(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action415::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (5, 69)
    }
    pub(crate) fn __reduce178<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum", Identifier => ActionFn(416);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action416::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (2, 69)
    }
    pub(crate) fn __reduce179<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumSpecifier = "enum" => ActionFn(417);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action417::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce180<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumerationConstant = Identifier => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce181<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Enumerator = EnumerationConstant, "=", ConstantExpression => ActionFn(337);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action337::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce182<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Enumerator = EnumerationConstant => ActionFn(338);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action338::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce183<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumeratorList = Enumerator => ActionFn(314);
        let __sym0 = __pop_Variant51(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action314::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce184<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumeratorList = Enumerator, ("," Enumerator)+ => ActionFn(315);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant51(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action315::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (2, 72)
    }
    pub(crate) fn __reduce185<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EqualityExpression = RelationalExpression => ActionFn(116);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action116::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce186<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EqualityExpression = EqualityExpression, "==", RelationalExpression => ActionFn(117);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action117::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 73)
    }
    pub(crate) fn __reduce187<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EqualityExpression = EqualityExpression, "!=", RelationalExpression => ActionFn(118);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action118::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 73)
    }
    pub(crate) fn __reduce188<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExclusiveOrExpression = AndExpression => ActionFn(120);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action120::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce189<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExclusiveOrExpression = ExclusiveOrExpression, "^", AndExpression => ActionFn(121);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action121::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 74)
    }
    pub(crate) fn __reduce190<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expression = AssignmentExpression => ActionFn(298);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action298::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce191<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expression = AssignmentExpression, ("," AssignmentExpression)+ => ActionFn(299);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action299::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 75)
    }
    pub(crate) fn __reduce192<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expression? = Expression => ActionFn(167);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action167::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce193<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expression? =  => ActionFn(168);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action168::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (0, 76)
    }
    pub(crate) fn __reduce194<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpressionStatement = Expression, ";" => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (2, 77)
    }
    pub(crate) fn __reduce195<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExternalDeclaration = FunctionDefinition => ActionFn(2);
        let __sym0 = __pop_Variant57(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce196<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExternalDeclaration = Declaration => ActionFn(3);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce197<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExternalDeclaration* =  => ActionFn(249);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action249::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (0, 79)
    }
    pub(crate) fn __reduce198<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExternalDeclaration* = ExternalDeclaration+ => ActionFn(250);
        let __sym0 = __pop_Variant54(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action250::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce199<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExternalDeclaration+ = ExternalDeclaration => ActionFn(251);
        let __sym0 = __pop_Variant53(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action251::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (1, 80)
    }
    pub(crate) fn __reduce200<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExternalDeclaration+ = ExternalDeclaration+, ExternalDeclaration => ActionFn(252);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant53(__symbols);
        let __sym0 = __pop_Variant54(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action252::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (2, 80)
    }
    pub(crate) fn __reduce201<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ForInitializerPart = Declaration => ActionFn(159);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action159::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant55(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce202<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ForInitializerPart? = ForInitializerPart => ActionFn(169);
        let __sym0 = __pop_Variant55(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action169::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce203<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ForInitializerPart? =  => ActionFn(170);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action170::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (0, 82)
    }
    pub(crate) fn __reduce204<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionDefinition = DeclarationSpecifiers, Declarator, DeclarationList, CompoundStatement => ActionFn(372);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant36(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant42(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action372::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (4, 83)
    }
    pub(crate) fn __reduce205<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionDefinition = DeclarationSpecifiers, Declarator, CompoundStatement => ActionFn(373);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant36(__symbols);
        let __sym1 = __pop_Variant42(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action373::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (3, 83)
    }
    pub(crate) fn __reduce206<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionSpecifier = "inline" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce207<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionSpecifier = "_Noreturn" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce208<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // GenericAssocList = GenericAssociation => ActionFn(318);
        let __sym0 = __pop_Variant60(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action318::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce209<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // GenericAssocList = GenericAssociation, ("," GenericAssociation)+ => ActionFn(319);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant60(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action319::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (2, 85)
    }
    pub(crate) fn __reduce210<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // GenericAssociation = TypeName, ":", AssignmentExpression => ActionFn(87);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant84(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action87::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant60(__nt), __end));
        (3, 86)
    }
    pub(crate) fn __reduce211<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // GenericAssociation = "default", ":", AssignmentExpression => ActionFn(88);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action88::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant60(__nt), __end));
        (3, 86)
    }
    pub(crate) fn __reduce212<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // GenericSelection = "_Generic", "(", AssignmentExpression, ",", GenericAssocList, ")" => ActionFn(85);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant59(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action85::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (6, 87)
    }
    pub(crate) fn __reduce213<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Identifier? = Identifier => ActionFn(236);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action236::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 88)
    }
    pub(crate) fn __reduce214<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Identifier? =  => ActionFn(237);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action237::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 88)
    }
    pub(crate) fn __reduce215<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IdentifierList = Identifier => ActionFn(322);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action322::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 89)
    }
    pub(crate) fn __reduce216<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IdentifierList = Identifier, ("," Identifier)+ => ActionFn(323);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action323::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (2, 89)
    }
    pub(crate) fn __reduce217<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IdentifierList? = IdentifierList => ActionFn(210);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action210::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 90)
    }
    pub(crate) fn __reduce218<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IdentifierList? =  => ActionFn(211);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action211::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (0, 90)
    }
    pub(crate) fn __reduce219<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InclusiveOrExpression = ExclusiveOrExpression => ActionFn(122);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action122::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 91)
    }
    pub(crate) fn __reduce220<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InclusiveOrExpression = InclusiveOrExpression, "|", ExclusiveOrExpression => ActionFn(123);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action123::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 91)
    }
    pub(crate) fn __reduce221<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitDeclarator = Declarator => ActionFn(12);
        let __sym0 = __pop_Variant42(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce222<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitDeclarator = Declarator, "=", Initializer => ActionFn(13);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant66(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant42(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action13::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (3, 92)
    }
    pub(crate) fn __reduce223<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitDeclaratorList = InitDeclarator => ActionFn(326);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action326::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 93)
    }
    pub(crate) fn __reduce224<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitDeclaratorList = InitDeclarator, ("," InitDeclarator)+ => ActionFn(327);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action327::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (2, 93)
    }
    pub(crate) fn __reduce225<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitDeclaratorList? = InitDeclaratorList => ActionFn(243);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action243::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce226<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitDeclaratorList? =  => ActionFn(244);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action244::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (0, 94)
    }
    pub(crate) fn __reduce227<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Initializer = AssignmentExpression => ActionFn(76);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action76::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce228<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Initializer = "{", Designation, Initializer, ",", "}" => ActionFn(424);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant66(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action424::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (5, 95)
    }
    pub(crate) fn __reduce229<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Initializer = "{", Designation, Initializer, ("," Designation? Initializer)+, ",", "}" => ActionFn(425);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant66(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action425::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (6, 95)
    }
    pub(crate) fn __reduce230<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Initializer = "{", Initializer, ",", "}" => ActionFn(426);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant66(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action426::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (4, 95)
    }
    pub(crate) fn __reduce231<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Initializer = "{", Initializer, ("," Designation? Initializer)+, ",", "}" => ActionFn(427);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant66(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action427::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (5, 95)
    }
    pub(crate) fn __reduce232<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Initializer = "{", Designation, Initializer, "}" => ActionFn(428);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant66(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action428::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (4, 95)
    }
    pub(crate) fn __reduce233<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Initializer = "{", Designation, Initializer, ("," Designation? Initializer)+, "}" => ActionFn(429);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant66(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action429::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (5, 95)
    }
    pub(crate) fn __reduce234<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Initializer = "{", Initializer, "}" => ActionFn(430);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant66(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action430::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (3, 95)
    }
    pub(crate) fn __reduce235<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Initializer = "{", Initializer, ("," Designation? Initializer)+, "}" => ActionFn(431);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant66(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action431::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (4, 95)
    }
    pub(crate) fn __reduce236<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitializerList = Designation, Initializer => ActionFn(308);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant66(__symbols);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action308::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant67(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce237<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitializerList = Designation, Initializer, ("," Designation? Initializer)+ => ActionFn(309);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant66(__symbols);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action309::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant67(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce238<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitializerList = Initializer => ActionFn(310);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action310::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant67(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce239<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InitializerList = Initializer, ("," Designation? Initializer)+ => ActionFn(311);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action311::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant67(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce240<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "while", "(", Expression, ")", Statement => ActionFn(160);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant52(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action160::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce241<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "do", Statement, "while", "(", Expression, ")", ";" => ActionFn(161);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant52(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action161::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (7, 97)
    }
    pub(crate) fn __reduce242<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "for", "(", ForInitializerPart, Expression, ";", Expression, ")", Statement => ActionFn(400);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant52(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action400::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (8, 97)
    }
    pub(crate) fn __reduce243<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "for", "(", Expression, ";", Expression, ")", Statement => ActionFn(401);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant52(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action401::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (7, 97)
    }
    pub(crate) fn __reduce244<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "for", "(", ForInitializerPart, Expression, ";", ")", Statement => ActionFn(402);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant52(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action402::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (7, 97)
    }
    pub(crate) fn __reduce245<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "for", "(", Expression, ";", ")", Statement => ActionFn(403);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant52(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action403::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (6, 97)
    }
    pub(crate) fn __reduce246<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "for", "(", ForInitializerPart, ";", Expression, ")", Statement => ActionFn(404);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant52(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action404::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (7, 97)
    }
    pub(crate) fn __reduce247<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "for", "(", ";", Expression, ")", Statement => ActionFn(405);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant52(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action405::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (6, 97)
    }
    pub(crate) fn __reduce248<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "for", "(", ForInitializerPart, ";", ")", Statement => ActionFn(406);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant52(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action406::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (6, 97)
    }
    pub(crate) fn __reduce249<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IterationStatement = "for", "(", ";", ")", Statement => ActionFn(407);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant52(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action407::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce250<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JumpStatement = "goto", Str<Identifier>, ";" => ActionFn(163);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant75(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action163::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (3, 98)
    }
    pub(crate) fn __reduce251<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JumpStatement = "continue", ";" => ActionFn(164);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action164::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (2, 98)
    }
    pub(crate) fn __reduce252<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JumpStatement = "break", ";" => ActionFn(165);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action165::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (2, 98)
    }
    pub(crate) fn __reduce253<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JumpStatement = "return", Expression, ";" => ActionFn(396);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action396::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (3, 98)
    }
    pub(crate) fn __reduce254<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // JumpStatement = "return", ";" => ActionFn(397);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action397::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (2, 98)
    }
    pub(crate) fn __reduce255<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // LabeledStatement = Str<Identifier>, ":", Statement => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant52(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant75(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (3, 99)
    }
    pub(crate) fn __reduce256<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // LabeledStatement = "case", ConstantExpression, ":", Statement => ActionFn(155);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant52(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action155::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (4, 99)
    }
    pub(crate) fn __reduce257<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // LabeledStatement = "default", ":", Statement => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant52(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (3, 99)
    }
    pub(crate) fn __reduce258<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // LogicalAndExpression = InclusiveOrExpression => ActionFn(124);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action124::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 100)
    }
    pub(crate) fn __reduce259<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // LogicalAndExpression = LogicalAndExpression, "&&", InclusiveOrExpression => ActionFn(125);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action125::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 100)
    }
    pub(crate) fn __reduce260<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // LogicalOrExpression = LogicalAndExpression => ActionFn(126);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action126::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 101)
    }
    pub(crate) fn __reduce261<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // LogicalOrExpression = LogicalOrExpression, "||", LogicalAndExpression => ActionFn(127);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action127::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 101)
    }
    pub(crate) fn __reduce262<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MultiplicativeExpression = CastExpression => ActionFn(101);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce263<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MultiplicativeExpression = MultiplicativeExpression, "*", CastExpression => ActionFn(102);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action102::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 102)
    }
    pub(crate) fn __reduce264<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MultiplicativeExpression = MultiplicativeExpression, "/", CastExpression => ActionFn(103);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action103::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 102)
    }
    pub(crate) fn __reduce265<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MultiplicativeExpression = MultiplicativeExpression, "%", CastExpression => ActionFn(104);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action104::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 102)
    }
    pub(crate) fn __reduce266<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterDeclaration = DeclarationSpecifiers, Declarator => ActionFn(64);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant42(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action64::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant68(__nt), __end));
        (2, 103)
    }
    pub(crate) fn __reduce267<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterDeclaration = DeclarationSpecifiers, AbstractDeclarator => ActionFn(356);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action356::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant68(__nt), __end));
        (2, 103)
    }
    pub(crate) fn __reduce268<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterDeclaration = DeclarationSpecifiers => ActionFn(357);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action357::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant68(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce269<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterList = ParameterDeclaration => ActionFn(330);
        let __sym0 = __pop_Variant68(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action330::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant69(__nt), __end));
        (1, 104)
    }
    pub(crate) fn __reduce270<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterList = ParameterDeclaration, ("," ParameterDeclaration)+ => ActionFn(331);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant68(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action331::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant69(__nt), __end));
        (2, 104)
    }
    pub(crate) fn __reduce271<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterTypeList = ParameterDeclaration, ",", "..." => ActionFn(440);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant68(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action440::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant70(__nt), __end));
        (3, 105)
    }
    pub(crate) fn __reduce272<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterTypeList = ParameterDeclaration, ("," ParameterDeclaration)+, ",", "..." => ActionFn(441);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant68(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action441::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant70(__nt), __end));
        (4, 105)
    }
    pub(crate) fn __reduce273<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterTypeList = ParameterDeclaration => ActionFn(442);
        let __sym0 = __pop_Variant68(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action442::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant70(__nt), __end));
        (1, 105)
    }
    pub(crate) fn __reduce274<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterTypeList = ParameterDeclaration, ("," ParameterDeclaration)+ => ActionFn(443);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant68(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action443::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant70(__nt), __end));
        (2, 105)
    }
    pub(crate) fn __reduce275<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterTypeList? = ParameterTypeList => ActionFn(190);
        let __sym0 = __pop_Variant70(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action190::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant71(__nt), __end));
        (1, 106)
    }
    pub(crate) fn __reduce276<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParameterTypeList? =  => ActionFn(191);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action191::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant71(__nt), __end));
        (0, 106)
    }
    pub(crate) fn __reduce277<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pointer = ("*" TypeQualifierList?)+ => ActionFn(60);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 107)
    }
    pub(crate) fn __reduce278<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pointer? = Pointer => ActionFn(216);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action216::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant72(__nt), __end));
        (1, 108)
    }
    pub(crate) fn __reduce279<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pointer? =  => ActionFn(217);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action217::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant72(__nt), __end));
        (0, 108)
    }
    pub(crate) fn __reduce280<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = PrimaryExpression => ActionFn(89);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 109)
    }
    pub(crate) fn __reduce281<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = PostfixExpression, "[", Expression, "]" => ActionFn(90);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action90::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce282<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = PostfixExpression, "(", ArgumentExpressionList, ")" => ActionFn(360);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action360::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce283<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = PostfixExpression, "(", ")" => ActionFn(361);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action361::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce284<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = PostfixExpression, ".", Str<Identifier> => ActionFn(92);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant75(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action92::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce285<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = PostfixExpression, "->", Str<Identifier> => ActionFn(93);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant75(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action93::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce286<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = PostfixExpression, "++" => ActionFn(94);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce287<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = PostfixExpression, "--" => ActionFn(95);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action95::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce288<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = "(", TypeName, ")", "{", Designation, Initializer, "}" => ActionFn(432);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant66(__symbols);
        let __sym4 = __pop_Variant43(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant84(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action432::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 109)
    }
    pub(crate) fn __reduce289<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = "(", TypeName, ")", "{", Designation, Initializer, ("," Designation? Initializer)+, "}" => ActionFn(433);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant9(__symbols);
        let __sym5 = __pop_Variant66(__symbols);
        let __sym4 = __pop_Variant43(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant84(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action433::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (8, 109)
    }
    pub(crate) fn __reduce290<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = "(", TypeName, ")", "{", Initializer, "}" => ActionFn(434);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant66(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant84(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action434::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (6, 109)
    }
    pub(crate) fn __reduce291<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = "(", TypeName, ")", "{", Initializer, ("," Designation? Initializer)+, "}" => ActionFn(435);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant9(__symbols);
        let __sym4 = __pop_Variant66(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant84(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action435::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 109)
    }
    pub(crate) fn __reduce292<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = "(", TypeName, ")", "{", Designation, Initializer, ",", "}" => ActionFn(436);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant66(__symbols);
        let __sym4 = __pop_Variant43(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant84(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action436::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (8, 109)
    }
    pub(crate) fn __reduce293<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = "(", TypeName, ")", "{", Designation, Initializer, ("," Designation? Initializer)+, ",", "}" => ActionFn(437);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant9(__symbols);
        let __sym5 = __pop_Variant66(__symbols);
        let __sym4 = __pop_Variant43(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant84(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action437::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (9, 109)
    }
    pub(crate) fn __reduce294<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = "(", TypeName, ")", "{", Initializer, ",", "}" => ActionFn(438);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant66(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant84(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action438::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 109)
    }
    pub(crate) fn __reduce295<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostfixExpression = "(", TypeName, ")", "{", Initializer, ("," Designation? Initializer)+, ",", "}" => ActionFn(439);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant9(__symbols);
        let __sym4 = __pop_Variant66(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant84(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action439::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (8, 109)
    }
    pub(crate) fn __reduce296<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimaryExpression = Str<Identifier> => ActionFn(84);
        let __sym0 = __pop_Variant75(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce297<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RelationalExpression = ShiftExpression => ActionFn(111);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce298<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RelationalExpression = RelationalExpression, "<", ShiftExpression => ActionFn(112);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action112::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 111)
    }
    pub(crate) fn __reduce299<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RelationalExpression = RelationalExpression, ">", ShiftExpression => ActionFn(113);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action113::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 111)
    }
    pub(crate) fn __reduce300<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RelationalExpression = RelationalExpression, "<=", ShiftExpression => ActionFn(114);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action114::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 111)
    }
    pub(crate) fn __reduce301<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RelationalExpression = RelationalExpression, ">=", ShiftExpression => ActionFn(115);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action115::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 111)
    }
    pub(crate) fn __reduce302<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SelectionStatement = "if", "(", Expression, ")", Statement => ActionFn(157);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant52(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action157::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (5, 112)
    }
    pub(crate) fn __reduce303<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SelectionStatement = "switch", "(", Expression, ")", Statement => ActionFn(158);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant52(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action158::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (5, 112)
    }
    pub(crate) fn __reduce304<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ShiftExpression = AdditiveExpression => ActionFn(108);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 113)
    }
    pub(crate) fn __reduce305<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ShiftExpression = ShiftExpression, "<<", AdditiveExpression => ActionFn(109);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action109::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 113)
    }
    pub(crate) fn __reduce306<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ShiftExpression = ShiftExpression, ">>", AdditiveExpression => ActionFn(110);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action110::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 113)
    }
    pub(crate) fn __reduce307<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SpecifierQualifierList = TypeSpecifier, TypeQualifier => ActionFn(36);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant85(__symbols);
        let __sym0 = __pop_Variant89(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action36::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant73(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce308<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Statement = LabeledStatement => ActionFn(145);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action145::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce309<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Statement = ExpressionStatement => ActionFn(146);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action146::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce310<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Statement = SelectionStatement => ActionFn(147);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action147::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce311<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Statement = IterationStatement => ActionFn(148);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action148::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce312<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Statement = JumpStatement => ActionFn(149);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action149::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce313<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StaticAssertDeclaration = "_Static_assert", "(", ConstantExpression, ",", Str<StringLiteral>, ")", ";" => ActionFn(83);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant75(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action83::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (7, 116)
    }
    pub(crate) fn __reduce314<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StorageClassSpecifier = "typedef" => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant74(__nt), __end));
        (1, 117)
    }
    pub(crate) fn __reduce315<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Str<Identifier> = Identifier => ActionFn(354);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action354::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant75(__nt), __end));
        (1, 118)
    }
    pub(crate) fn __reduce316<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Str<StringLiteral> = StringLiteral => ActionFn(355);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action355::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant75(__nt), __end));
        (1, 119)
    }
    pub(crate) fn __reduce317<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclaration = SpecifierQualifierList, StructDeclaratorList, ";" => ActionFn(452);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant79(__symbols);
        let __sym0 = __pop_Variant73(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action452::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant76(__nt), __end));
        (3, 120)
    }
    pub(crate) fn __reduce318<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclaration = SpecifierQualifierList, ";" => ActionFn(453);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant73(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action453::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant76(__nt), __end));
        (2, 120)
    }
    pub(crate) fn __reduce319<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclaration = StaticAssertDeclaration => ActionFn(35);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant76(__nt), __end));
        (1, 120)
    }
    pub(crate) fn __reduce320<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclaration+ = StructDeclaration => ActionFn(234);
        let __sym0 = __pop_Variant76(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action234::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant77(__nt), __end));
        (1, 121)
    }
    pub(crate) fn __reduce321<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclaration+ = StructDeclaration+, StructDeclaration => ActionFn(235);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant76(__symbols);
        let __sym0 = __pop_Variant77(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action235::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant77(__nt), __end));
        (2, 121)
    }
    pub(crate) fn __reduce322<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclarationList = StructDeclaration+ => ActionFn(33);
        let __sym0 = __pop_Variant77(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action33::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant77(__nt), __end));
        (1, 122)
    }
    pub(crate) fn __reduce323<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclarator = Declarator => ActionFn(38);
        let __sym0 = __pop_Variant42(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant78(__nt), __end));
        (1, 123)
    }
    pub(crate) fn __reduce324<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclaratorList = StructDeclarator => ActionFn(334);
        let __sym0 = __pop_Variant78(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action334::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant79(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce325<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclaratorList = StructDeclarator, ("," StructDeclarator)+ => ActionFn(335);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant78(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action335::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant79(__nt), __end));
        (2, 124)
    }
    pub(crate) fn __reduce326<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclaratorList? = StructDeclaratorList => ActionFn(232);
        let __sym0 = __pop_Variant79(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action232::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant80(__nt), __end));
        (1, 125)
    }
    pub(crate) fn __reduce327<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDeclaratorList? =  => ActionFn(233);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action233::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant80(__nt), __end));
        (0, 125)
    }
    pub(crate) fn __reduce328<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructOrUnion = "struct" => ActionFn(31);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant81(__nt), __end));
        (1, 126)
    }
    pub(crate) fn __reduce329<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructOrUnion = "union" => ActionFn(32);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action32::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant81(__nt), __end));
        (1, 126)
    }
    pub(crate) fn __reduce330<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructOrUnionSpecifier = StructOrUnion, Identifier, "{", StructDeclarationList, "}" => ActionFn(418);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant77(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant81(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action418::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant82(__nt), __end));
        (5, 127)
    }
    pub(crate) fn __reduce331<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructOrUnionSpecifier = StructOrUnion, "{", StructDeclarationList, "}" => ActionFn(419);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant77(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant81(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action419::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant82(__nt), __end));
        (4, 127)
    }
    pub(crate) fn __reduce332<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructOrUnionSpecifier = StructOrUnion, Identifier => ActionFn(30);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant81(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action30::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant82(__nt), __end));
        (2, 127)
    }
    pub(crate) fn __reduce333<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TranslationUnit =  => ActionFn(398);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action398::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant83(__nt), __end));
        (0, 128)
    }
    pub(crate) fn __reduce334<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TranslationUnit = ExternalDeclaration+ => ActionFn(399);
        let __sym0 = __pop_Variant54(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action399::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant83(__nt), __end));
        (1, 128)
    }
    pub(crate) fn __reduce335<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeName = SpecifierQualifierList, AbstractDeclarator => ActionFn(358);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant73(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action358::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant84(__nt), __end));
        (2, 129)
    }
    pub(crate) fn __reduce336<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeName = SpecifierQualifierList => ActionFn(359);
        let __sym0 = __pop_Variant73(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action359::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant84(__nt), __end));
        (1, 129)
    }
    pub(crate) fn __reduce337<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeQualifier = "const" => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant85(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce338<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeQualifier = "restrict" => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant85(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce339<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeQualifier = "volatile" => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant85(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce340<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeQualifier = "_Atomic" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant85(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce341<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeQualifier+ = TypeQualifier => ActionFn(205);
        let __sym0 = __pop_Variant85(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action205::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant86(__nt), __end));
        (1, 131)
    }
    pub(crate) fn __reduce342<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeQualifier+ = TypeQualifier+, TypeQualifier => ActionFn(206);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant85(__symbols);
        let __sym0 = __pop_Variant86(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action206::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant86(__nt), __end));
        (2, 131)
    }
    pub(crate) fn __reduce343<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeQualifierList = TypeQualifier+ => ActionFn(61);
        let __sym0 = __pop_Variant86(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant87(__nt), __end));
        (1, 132)
    }
    pub(crate) fn __reduce344<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeQualifierList? = TypeQualifierList => ActionFn(214);
        let __sym0 = __pop_Variant87(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action214::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant88(__nt), __end));
        (1, 133)
    }
    pub(crate) fn __reduce345<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeQualifierList? =  => ActionFn(215);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action215::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant88(__nt), __end));
        (0, 133)
    }
    pub(crate) fn __reduce346<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "void" => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce347<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "char" => ActionFn(16);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce348<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "short" => ActionFn(17);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce349<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "int" => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce350<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "long" => ActionFn(19);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce351<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "float" => ActionFn(20);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce352<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "double" => ActionFn(21);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action21::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce353<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "signed" => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce354<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "unsigned" => ActionFn(23);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce355<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "_Bool" => ActionFn(24);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce356<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = "_Complex" => ActionFn(25);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce357<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = AtomicTypeSpecifier => ActionFn(26);
        let __sym0 = __pop_Variant33(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce358<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = StructOrUnionSpecifier => ActionFn(27);
        let __sym0 = __pop_Variant82(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce359<
        'input,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSpecifier = TypedefName => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant89(__nt), __end));
        (1, 134)
    }
}
pub use self::__parse__TranslationUnit::TranslationUnitParser;

#[allow(unused_variables)]
fn __action0<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ast::Ast, usize),
) -> ast::Ast
{
    __0
}

#[allow(unused_variables)]
fn __action1<
    'input,
>(
    input: &'input str,
    (_, items, _): (usize, ::std::vec::Vec<ast::ExternalDeclaration>, usize),
) -> ast::Ast
{
    ast::Ast(items)
}

#[allow(unused_variables)]
fn __action2<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ast::FunctionDefinition, usize),
) -> ast::ExternalDeclaration
{
    ast::ExternalDeclaration::FunctionDefinition(Box::new(__0))
}

#[allow(unused_variables)]
fn __action3<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::Declaration, usize),
) -> ast::ExternalDeclaration
{
    ast::ExternalDeclaration::Declaration(Box::new(__0))
}

#[allow(unused_variables)]
fn __action4<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<decl::Declaration>, usize),
) -> ::std::vec::Vec<decl::Declaration>
{
    __0
}

#[allow(unused_variables)]
fn __action5<
    'input,
>(
    input: &'input str,
    (_, specifiers, _): (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    (_, declarator, _): (usize, decl::Declarator, usize),
    (_, declaration, _): (usize, ::std::option::Option<::std::vec::Vec<decl::Declaration>>, usize),
    (_, compound, _): (usize, stmt::CompoundStmt, usize),
) -> ast::FunctionDefinition
{
    ast::FunctionDefinition::new(specifiers, declarator, declaration, compound)
}

#[allow(unused_variables)]
fn __action6<
    'input,
>(
    input: &'input str,
    (_, dspec, _): (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    (_, idec, _): (usize, ::std::option::Option<Vec<decl::InitDeclarator>>, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> decl::Declaration
{
    {
            let dec = idec.or(Default::default()).unwrap();
            todo!()
            // decl::Declaration::Other(decl::Other{specifiers: dspec, init_declarators: dec})
        }
}

#[allow(unused_variables)]
fn __action7<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::Declaration, usize),
) -> decl::Declaration
{
    __0
}

#[allow(unused_variables)]
fn __action8<
    'input,
>(
    input: &'input str,
    (_, spec, _): (usize, decl::StorageClassSpecifier, usize),
) -> decl::DeclarationSpecifier
{
    decl::DeclarationSpecifier::StorageClassSpecifier(spec)
}

#[allow(unused_variables)]
fn __action9<
    'input,
>(
    input: &'input str,
    (_, spec, _): (usize, decl::TypeSpecifier, usize),
) -> decl::DeclarationSpecifier
{
    decl::DeclarationSpecifier::TypeSpecifier(spec)
}

#[allow(unused_variables)]
fn __action10<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
) -> ::std::vec::Vec<decl::DeclarationSpecifier>
{
    __0
}

#[allow(unused_variables)]
fn __action11<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::InitDeclarator, usize),
    (_, __1, _): (usize, ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>, usize),
) -> Vec<decl::InitDeclarator>
{
    todo!()
}

#[allow(unused_variables)]
fn __action12<
    'input,
>(
    input: &'input str,
    (_, dec, _): (usize, decl::Declarator, usize),
) -> decl::InitDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action13<
    'input,
>(
    input: &'input str,
    (_, dec, _): (usize, decl::Declarator, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, ini, _): (usize, decl::Initializer, usize),
) -> decl::InitDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action14<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::StorageClassSpecifier
{
    decl::StorageClassSpecifier::Typedef
}

#[allow(unused_variables)]
fn __action15<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Void
}

#[allow(unused_variables)]
fn __action16<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Char
}

#[allow(unused_variables)]
fn __action17<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Short
}

#[allow(unused_variables)]
fn __action18<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Int
}

#[allow(unused_variables)]
fn __action19<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Long
}

#[allow(unused_variables)]
fn __action20<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Float
}

#[allow(unused_variables)]
fn __action21<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Double
}

#[allow(unused_variables)]
fn __action22<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Signed
}

#[allow(unused_variables)]
fn __action23<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Unsigned
}

#[allow(unused_variables)]
fn __action24<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Bool
}

#[allow(unused_variables)]
fn __action25<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::Complex
}

#[allow(unused_variables)]
fn __action26<
    'input,
>(
    input: &'input str,
    (_, ats, _): (usize, decl::AtomicTypeSpecifier, usize),
) -> decl::TypeSpecifier
{
    todo!()
}

#[allow(unused_variables)]
fn __action27<
    'input,
>(
    input: &'input str,
    (_, sous, _): (usize, decl::StructOrUnionSpecifier, usize),
) -> decl::TypeSpecifier
{
    decl::TypeSpecifier::StructOrUnionSpecifier(sous)
}

#[allow(unused_variables)]
fn __action28<
    'input,
>(
    input: &'input str,
    (_, tdef, _): (usize, lexer::Token, usize),
) -> decl::TypeSpecifier
{
    todo!()
}

#[allow(unused_variables)]
fn __action29<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::ObjKind, usize),
    (_, __1, _): (usize, ::std::option::Option<lexer::Token>, usize),
    (_, __2, _): (usize, lexer::Token, usize),
    (_, __3, _): (usize, ::std::vec::Vec<decl::StructDeclaration>, usize),
    (_, __4, _): (usize, lexer::Token, usize),
) -> decl::StructOrUnionSpecifier
{
    todo!()
}

#[allow(unused_variables)]
fn __action30<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::ObjKind, usize),
    (_, __1, _): (usize, lexer::Token, usize),
) -> decl::StructOrUnionSpecifier
{
    todo!()
}

#[allow(unused_variables)]
fn __action31<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::ObjKind
{
    decl::ObjKind::Struct
}

#[allow(unused_variables)]
fn __action32<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::ObjKind
{
    decl::ObjKind::Union
}

#[allow(unused_variables)]
fn __action33<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<decl::StructDeclaration>, usize),
) -> ::std::vec::Vec<decl::StructDeclaration>
{
    __0
}

#[allow(unused_variables)]
fn __action34<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (decl::TypeSpecifier, decl::TypeQualifier), usize),
    (_, __1, _): (usize, ::std::option::Option<Vec<decl::StructDeclarator>>, usize),
    (_, __2, _): (usize, lexer::Token, usize),
) -> decl::StructDeclaration
{
    todo!()
}

#[allow(unused_variables)]
fn __action35<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::Declaration, usize),
) -> decl::StructDeclaration
{
    todo!()
}

#[allow(unused_variables)]
fn __action36<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::TypeSpecifier, usize),
    (_, __1, _): (usize, decl::TypeQualifier, usize),
) -> (decl::TypeSpecifier, decl::TypeQualifier)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action37<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, decl::StructDeclarator, usize),
    (_, n, _): (usize, ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>, usize),
) -> Vec<decl::StructDeclarator>
{
    todo!()
}

#[allow(unused_variables)]
fn __action38<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::Declarator, usize),
) -> decl::StructDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action39<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, ::std::option::Option<lexer::Token>, usize),
    (_, __2, _): (usize, ::std::option::Option<(lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)>, usize),
) -> decl::EnumSpecifier
{
    todo!()
}

#[allow(unused_variables)]
fn __action40<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, Vec<decl::Enumerator>, usize),
    (_, l, _): (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
) -> Vec<decl::Enumerator>
{
    todo!()
}

#[allow(unused_variables)]
fn __action41<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> lexer::Token
{
    __0
}

#[allow(unused_variables)]
fn __action42<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, c, _): (usize, ::std::option::Option<(lexer::Token, expr::Expression)>, usize),
) -> Vec<decl::Enumerator>
{
    todo!()
}

#[allow(unused_variables)]
fn __action43<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, typename, _): (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> decl::AtomicTypeSpecifier
{
    todo!()
}

#[allow(unused_variables)]
fn __action44<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeQualifier
{
    decl::TypeQualifier::Const
}

#[allow(unused_variables)]
fn __action45<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeQualifier
{
    decl::TypeQualifier::Restrict
}

#[allow(unused_variables)]
fn __action46<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeQualifier
{
    decl::TypeQualifier::Volatile
}

#[allow(unused_variables)]
fn __action47<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::TypeQualifier
{
    decl::TypeQualifier::Atomic
}

#[allow(unused_variables)]
fn __action48<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::FunctionSpecifier
{
    decl::FunctionSpecifier::Inline
}

#[allow(unused_variables)]
fn __action49<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::FunctionSpecifier
{
    decl::FunctionSpecifier::Noreturn
}

#[allow(unused_variables)]
fn __action50<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    (_, __3, _): (usize, lexer::Token, usize),
    (_, __4, _): (usize, lexer::Token, usize),
    (_, __5, _): (usize, lexer::Token, usize),
    (_, __6, _): (usize, expr::Expression, usize),
    (_, __7, _): (usize, lexer::Token, usize),
) -> (lexer::Token, lexer::Token, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), lexer::Token, lexer::Token, lexer::Token, expr::Expression, lexer::Token)
{
    (__0, __1, __2, __3, __4, __5, __6, __7)
}

#[allow(unused_variables)]
fn __action51<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::option::Option<::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>>, usize),
    (_, __1, _): (usize, decl::DirectDeclarator, usize),
) -> decl::Declarator
{
    decl::Declarator{}
}

#[allow(unused_variables)]
fn __action52<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    decl::DirectDeclarator::FunctionDeclarators
}

#[allow(unused_variables)]
fn __action53<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, decl::Declarator, usize),
    (_, __2, _): (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    decl::DirectDeclarator::FunctionDeclarators
}

#[allow(unused_variables)]
fn __action54<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::DirectDeclarator, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, ::std::option::Option<Vec<decl::TypeQualifier>>, usize),
    (_, __3, _): (usize, ::std::option::Option<expr::Expression>, usize),
    (_, __4, _): (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    decl::DirectDeclarator::FunctionDeclarators
}

#[allow(unused_variables)]
fn __action55<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::DirectDeclarator, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, lexer::Token, usize),
    (_, __3, _): (usize, ::std::option::Option<Vec<decl::TypeQualifier>>, usize),
    (_, __4, _): (usize, expr::Expression, usize),
    (_, __5, _): (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    decl::DirectDeclarator::FunctionDeclarators
}

#[allow(unused_variables)]
fn __action56<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::DirectDeclarator, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, Vec<decl::TypeQualifier>, usize),
    (_, __3, _): (usize, lexer::Token, usize),
    (_, __4, _): (usize, expr::Expression, usize),
    (_, __5, _): (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    decl::DirectDeclarator::FunctionDeclarators
}

#[allow(unused_variables)]
fn __action57<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::DirectDeclarator, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, Vec<decl::TypeQualifier>, usize),
    (_, __3, _): (usize, lexer::Token, usize),
    (_, __4, _): (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    decl::DirectDeclarator::FunctionDeclarators
}

#[allow(unused_variables)]
fn __action58<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::DirectDeclarator, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, decl::ParameterTypeList, usize),
    (_, __3, _): (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    decl::DirectDeclarator::FunctionDeclarators
}

#[allow(unused_variables)]
fn __action59<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::DirectDeclarator, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, ::std::option::Option<(lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>)>, usize),
    (_, __3, _): (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    decl::DirectDeclarator::FunctionDeclarators
}

#[allow(unused_variables)]
fn __action60<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>
{
    __0
}

#[allow(unused_variables)]
fn __action61<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<decl::TypeQualifier>, usize),
) -> Vec<decl::TypeQualifier>
{
    __0
}

#[allow(unused_variables)]
fn __action62<
    'input,
>(
    input: &'input str,
    (_, f, _): (usize, Vec<decl::ParameterDeclaration>, usize),
    (_, is_variadic, _): (usize, ::std::option::Option<(lexer::Token, lexer::Token)>, usize),
) -> decl::ParameterTypeList
{
    decl::ParameterTypeList{}
}

#[allow(unused_variables)]
fn __action63<
    'input,
>(
    input: &'input str,
    (_, f, _): (usize, decl::ParameterDeclaration, usize),
    (_, other, _): (usize, ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>, usize),
) -> Vec<decl::ParameterDeclaration>
{
    Vec::<decl::ParameterDeclaration>::new()
}

#[allow(unused_variables)]
fn __action64<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    (_, __1, _): (usize, decl::Declarator, usize),
) -> decl::ParameterDeclaration
{
    decl::ParameterDeclaration{}
}

#[allow(unused_variables)]
fn __action65<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    (_, __1, _): (usize, ::std::option::Option<decl::AbstractDeclarator>, usize),
) -> decl::ParameterDeclaration
{
    decl::ParameterDeclaration{}
}

#[allow(unused_variables)]
fn __action66<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, ::std::vec::Vec<(lexer::Token, lexer::Token)>, usize),
) -> (lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action67<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (decl::TypeSpecifier, decl::TypeQualifier), usize),
    (_, __1, _): (usize, ::std::option::Option<decl::AbstractDeclarator>, usize),
) -> ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action68<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>, usize),
) -> decl::AbstractDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action69<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::option::Option<::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>>, usize),
    (_, __1, _): (usize, decl::DirectAbstractDeclarator, usize),
) -> decl::AbstractDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action70<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, decl::AbstractDeclarator, usize),
    (_, __2, _): (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action71<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, ::std::option::Option<Vec<decl::TypeQualifier>>, usize),
    (_, __3, _): (usize, ::std::option::Option<expr::Expression>, usize),
    (_, __4, _): (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action72<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, lexer::Token, usize),
    (_, __3, _): (usize, ::std::option::Option<Vec<decl::TypeQualifier>>, usize),
    (_, __4, _): (usize, expr::Expression, usize),
    (_, __5, _): (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action73<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, Vec<decl::TypeQualifier>, usize),
    (_, __3, _): (usize, lexer::Token, usize),
    (_, __4, _): (usize, expr::Expression, usize),
    (_, __5, _): (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action74<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, lexer::Token, usize),
    (_, __3, _): (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action75<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, ::std::option::Option<decl::ParameterTypeList>, usize),
    (_, __3, _): (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    todo!()
}

#[allow(unused_variables)]
fn __action76<
    'input,
>(
    input: &'input str,
    (_, ae, _): (usize, expr::Expression, usize),
) -> decl::Initializer
{
    todo!()
}

#[allow(unused_variables)]
fn __action77<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, il, _): (usize, decl::InitializerList, usize),
    (_, _, _): (usize, ::std::option::Option<lexer::Token>, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> decl::Initializer
{
    decl::Initializer::InitializerList(il)
}

#[allow(unused_variables)]
fn __action78<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::option::Option<Vec<decl::Designator>>, usize),
    (_, __1, _): (usize, decl::Initializer, usize),
    (_, __2, _): (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
) -> decl::InitializerList
{
    todo!()
}

#[allow(unused_variables)]
fn __action79<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, Vec<decl::Designator>, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> Vec<decl::Designator>
{
    __0
}

#[allow(unused_variables)]
fn __action80<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<decl::Designator>, usize),
) -> Vec<decl::Designator>
{
    __0
}

#[allow(unused_variables)]
fn __action81<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, expr, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> decl::Designator
{
    decl::Designator::new_index(expr)
}

#[allow(unused_variables)]
fn __action82<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, ident, _): (usize, String, usize),
) -> decl::Designator
{
    decl::Designator::new_dot(ident)
}

#[allow(unused_variables)]
fn __action83<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, expr, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, msg, _): (usize, String, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> decl::Declaration
{
    decl::StaticAssert::new(expr, msg)
}

#[allow(unused_variables)]
fn __action84<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> expr::Expression
{
    expr::Expression::Identifier(__0)
}

#[allow(unused_variables)]
fn __action85<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, expression, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, association_list, _): (usize, Vec<expr::GenericAssociation>, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> expr::Expression
{
    todo!()
}

#[allow(unused_variables)]
fn __action86<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::GenericAssociation, usize),
    (_, __1, _): (usize, ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>, usize),
) -> Vec<expr::GenericAssociation>
{
    todo!()
}

#[allow(unused_variables)]
fn __action87<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, expression, _): (usize, expr::Expression, usize),
) -> expr::GenericAssociation
{
    todo!()
}

#[allow(unused_variables)]
fn __action88<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, expression, _): (usize, expr::Expression, usize),
) -> expr::GenericAssociation
{
    todo!()
}

#[allow(unused_variables)]
fn __action89<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action90<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_subscript(lhs, rhs)
}

#[allow(unused_variables)]
fn __action91<
    'input,
>(
    input: &'input str,
    (_, callie, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, args, _): (usize, ::std::option::Option<Vec<expr::Expression>>, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> expr::Expression
{
    expr::CallExpr::new(callie, args.or(Default::default()).unwrap())
}

#[allow(unused_variables)]
fn __action92<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, ident, _): (usize, String, usize),
) -> expr::Expression
{
    {
            let rhs = expr::Expression::Identifier(ident);
            expr::TwoOperandsExpr::new_access(lhs, rhs)
        }
}

#[allow(unused_variables)]
fn __action93<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, ident, _): (usize, String, usize),
) -> expr::Expression
{
    {
            let rhs = expr::Expression::Identifier(ident);
            expr::TwoOperandsExpr::new_ptr_access(lhs, rhs)
        }
}

#[allow(unused_variables)]
fn __action94<
    'input,
>(
    input: &'input str,
    (_, expr, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> expr::Expression
{
    expr::OneOperandExpr::new_postincrement(expr)
}

#[allow(unused_variables)]
fn __action95<
    'input,
>(
    input: &'input str,
    (_, expr, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> expr::Expression
{
    expr::OneOperandExpr::new_postdecrement(expr)
}

#[allow(unused_variables)]
fn __action96<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, init_list, _): (usize, decl::InitializerList, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> expr::Expression
{
    expr::CompoundLiteral::new(Box::new(init_list))
}

#[allow(unused_variables)]
fn __action97<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, init_list, _): (usize, decl::InitializerList, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> expr::Expression
{
    expr::CompoundLiteral::new(Box::new(init_list))
}

#[allow(unused_variables)]
fn __action98<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, expr::Expression, usize),
    (_, items, _): (usize, ::std::vec::Vec<(lexer::Token, expr::Expression)>, usize),
) -> Vec<expr::Expression>
{
    todo!()
}

#[allow(unused_variables)]
fn __action99<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action100<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, expr, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::CastExr::new((), expr)
}

#[allow(unused_variables)]
fn __action101<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action102<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_mul(lhs, rhs)
}

#[allow(unused_variables)]
fn __action103<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_div(lhs, rhs)
}

#[allow(unused_variables)]
fn __action104<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_rem(lhs, rhs)
}

#[allow(unused_variables)]
fn __action105<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action106<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_add(lhs, rhs)
}

#[allow(unused_variables)]
fn __action107<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_sub(lhs, rhs)
}

#[allow(unused_variables)]
fn __action108<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action109<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_left_shift(lhs, rhs)
}

#[allow(unused_variables)]
fn __action110<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_right_shift(lhs, rhs)
}

#[allow(unused_variables)]
fn __action111<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action112<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_le(lhs, rhs)
}

#[allow(unused_variables)]
fn __action113<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_ge(lhs, rhs)
}

#[allow(unused_variables)]
fn __action114<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_ge_or_eq(lhs, rhs)
}

#[allow(unused_variables)]
fn __action115<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_ge_or_eq(lhs, rhs)
}

#[allow(unused_variables)]
fn __action116<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action117<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_eq(lhs, rhs)
}

#[allow(unused_variables)]
fn __action118<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_not_eq(lhs, rhs)
}

#[allow(unused_variables)]
fn __action119<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, expr::Expression, usize),
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_bw_and(lhs, rhs)
}

#[allow(unused_variables)]
fn __action120<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action121<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_bw_xor(lhs, rhs)
}

#[allow(unused_variables)]
fn __action122<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action123<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_bw_or(lhs, rhs)
}

#[allow(unused_variables)]
fn __action124<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action125<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_logical_and(lhs, rhs)
}

#[allow(unused_variables)]
fn __action126<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action127<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::TwoOperandsExpr::new_logical_or(lhs, rhs)
}

#[allow(unused_variables)]
fn __action128<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action129<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
    (_, __1, _): (usize, lexer::Token, usize),
    (_, __2, _): (usize, expr::Expression, usize),
    (_, __3, _): (usize, lexer::Token, usize),
    (_, __4, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::Expression::Ternary(Box::new(expr::Ternary{}))
}

#[allow(unused_variables)]
fn __action130<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action131<
    'input,
>(
    input: &'input str,
    (_, lhs, _): (usize, expr::Expression, usize),
    (_, op, _): (usize, expr::BiTag, usize),
    (_, rhs, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    expr::Expression::TwoOperands(Box::new(expr::TwoOperandsExpr{lhs, op, rhs}))
}

#[allow(unused_variables)]
fn __action132<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::Assign
}

#[allow(unused_variables)]
fn __action133<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::MulAssign
}

#[allow(unused_variables)]
fn __action134<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::DivAssign
}

#[allow(unused_variables)]
fn __action135<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::RemAssign
}

#[allow(unused_variables)]
fn __action136<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::AddAssign
}

#[allow(unused_variables)]
fn __action137<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::SubAssign
}

#[allow(unused_variables)]
fn __action138<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::BwLShAssign
}

#[allow(unused_variables)]
fn __action139<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::BwRShAssign
}

#[allow(unused_variables)]
fn __action140<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::BwAndAssign
}

#[allow(unused_variables)]
fn __action141<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::BwXorAssign
}

#[allow(unused_variables)]
fn __action142<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> expr::BiTag
{
    expr::BiTag::BwOrAssign
}

#[allow(unused_variables)]
fn __action143<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
    (_, __1, _): (usize, ::std::vec::Vec<(lexer::Token, expr::Expression)>, usize),
) -> expr::Expression
{
    todo!()
}

#[allow(unused_variables)]
fn __action144<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> expr::Expression
{
    __0
}

#[allow(unused_variables)]
fn __action145<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    __0
}

#[allow(unused_variables)]
fn __action146<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    __0
}

#[allow(unused_variables)]
fn __action147<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    __0
}

#[allow(unused_variables)]
fn __action148<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    __0
}

#[allow(unused_variables)]
fn __action149<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    __0
}

#[allow(unused_variables)]
fn __action150<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, items, _): (usize, ::std::vec::Vec<stmt::BlockItem>, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> stmt::CompoundStmt
{
    stmt::CompoundStmt::new(items)
}

#[allow(unused_variables)]
fn __action151<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::Declaration, usize),
) -> stmt::BlockItem
{
    stmt::BlockItem::Declaration(__0)
}

#[allow(unused_variables)]
fn __action152<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, stmt::Statement, usize),
) -> stmt::BlockItem
{
    stmt::BlockItem::Statement(__0)
}

#[allow(unused_variables)]
fn __action153<
    'input,
>(
    input: &'input str,
    (_, expr, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> stmt::Statement
{
    stmt::Statement::new_expr_stmt(expr)
}

#[allow(unused_variables)]
fn __action154<
    'input,
>(
    input: &'input str,
    (_, label, _): (usize, String, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, stmt, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    stmt::Labeled::new(label, stmt)
}

#[allow(unused_variables)]
fn __action155<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, constant, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, body, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    stmt::Case::new(constant, body)
}

#[allow(unused_variables)]
fn __action156<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, body, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    stmt::Default::new(body)
}

#[allow(unused_variables)]
fn __action157<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, pred, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, on_success, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    stmt::IfStmt::new(pred, on_success)
}

#[allow(unused_variables)]
fn __action158<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, controlling, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, body, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    stmt::Statement::new_switch(controlling, body)
}

#[allow(unused_variables)]
fn __action159<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::Declaration, usize),
) -> stmt::ForInit
{
    stmt::ForInit::Declaration(Box::new(__0))
}

#[allow(unused_variables)]
fn __action160<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, pred, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, body, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    stmt::Statement::new_while(pred, body)
}

#[allow(unused_variables)]
fn __action161<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, body, _): (usize, stmt::Statement, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, pred, _): (usize, expr::Expression, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> stmt::Statement
{
    stmt::Statement::new_do_while(pred, body)
}

#[allow(unused_variables)]
fn __action162<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, init, _): (usize, ::std::option::Option<stmt::ForInit>, usize),
    (_, pred, _): (usize, ::std::option::Option<expr::Expression>, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, step, _): (usize, ::std::option::Option<expr::Expression>, usize),
    (_, _, _): (usize, lexer::Token, usize),
    (_, body, _): (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    stmt::Statement::new_for(init, pred, step, body)
}

#[allow(unused_variables)]
fn __action163<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, ident, _): (usize, String, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> stmt::Statement
{
    stmt::Statement::new_goto(ident)
}

#[allow(unused_variables)]
fn __action164<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, lexer::Token, usize),
) -> stmt::Statement
{
    stmt::Statement::new_continue()
}

#[allow(unused_variables)]
fn __action165<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, lexer::Token, usize),
) -> stmt::Statement
{
    stmt::Statement::new_break()
}

#[allow(unused_variables)]
fn __action166<
    'input,
>(
    input: &'input str,
    (_, _, _): (usize, lexer::Token, usize),
    (_, expr, _): (usize, ::std::option::Option<expr::Expression>, usize),
    (_, _, _): (usize, lexer::Token, usize),
) -> stmt::Statement
{
    stmt::Statement::new_return(expr)
}

#[allow(unused_variables)]
fn __action167<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> ::std::option::Option<expr::Expression>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action168<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<expr::Expression>
{
    None
}

#[allow(unused_variables)]
fn __action169<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, stmt::ForInit, usize),
) -> ::std::option::Option<stmt::ForInit>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action170<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<stmt::ForInit>
{
    None
}

#[allow(unused_variables)]
fn __action171<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<stmt::BlockItem>
{
    vec![]
}

#[allow(unused_variables)]
fn __action172<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<stmt::BlockItem>, usize),
) -> ::std::vec::Vec<stmt::BlockItem>
{
    v
}

#[allow(unused_variables)]
fn __action173<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(lexer::Token, expr::Expression)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action174<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, expr::Expression)>, usize),
) -> ::std::vec::Vec<(lexer::Token, expr::Expression)>
{
    v
}

#[allow(unused_variables)]
fn __action175<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, expr::Expression, usize),
) -> (lexer::Token, expr::Expression)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action176<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, Vec<expr::Expression>, usize),
) -> ::std::option::Option<Vec<expr::Expression>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action177<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Vec<expr::Expression>>
{
    None
}

#[allow(unused_variables)]
fn __action178<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action179<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>, usize),
) -> ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>
{
    v
}

#[allow(unused_variables)]
fn __action180<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, expr::GenericAssociation, usize),
) -> (lexer::Token, expr::GenericAssociation)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action181<
    'input,
>(
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, rule, _): (usize, lexer::Token, usize),
    (_, r, _): (usize, usize, usize),
) -> String
{
    input[l..r].to_string()
}

#[allow(unused_variables)]
fn __action182<
    'input,
>(
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, rule, _): (usize, lexer::Token, usize),
    (_, r, _): (usize, usize, usize),
) -> String
{
    input[l..r].to_string()
}

#[allow(unused_variables)]
fn __action183<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::Designator, usize),
) -> ::std::vec::Vec<decl::Designator>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action184<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<decl::Designator>, usize),
    (_, e, _): (usize, decl::Designator, usize),
) -> ::std::vec::Vec<decl::Designator>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action185<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action186<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>
{
    v
}

#[allow(unused_variables)]
fn __action187<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, ::std::option::Option<Vec<decl::Designator>>, usize),
    (_, __2, _): (usize, decl::Initializer, usize),
) -> (lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)
{
    (__0, __1, __2)
}

#[allow(unused_variables)]
fn __action188<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, Vec<decl::Designator>, usize),
) -> ::std::option::Option<Vec<decl::Designator>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action189<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Vec<decl::Designator>>
{
    None
}

#[allow(unused_variables)]
fn __action190<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::ParameterTypeList, usize),
) -> ::std::option::Option<decl::ParameterTypeList>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action191<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<decl::ParameterTypeList>
{
    None
}

#[allow(unused_variables)]
fn __action192<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::DirectAbstractDeclarator, usize),
) -> ::std::option::Option<decl::DirectAbstractDeclarator>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action193<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<decl::DirectAbstractDeclarator>
{
    None
}

#[allow(unused_variables)]
fn __action194<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(lexer::Token, lexer::Token)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action195<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, lexer::Token)>, usize),
) -> ::std::vec::Vec<(lexer::Token, lexer::Token)>
{
    v
}

#[allow(unused_variables)]
fn __action196<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, lexer::Token, usize),
) -> (lexer::Token, lexer::Token)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action197<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::AbstractDeclarator, usize),
) -> ::std::option::Option<decl::AbstractDeclarator>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action198<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<decl::AbstractDeclarator>
{
    None
}

#[allow(unused_variables)]
fn __action199<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action200<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>, usize),
) -> ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>
{
    v
}

#[allow(unused_variables)]
fn __action201<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, decl::ParameterDeclaration, usize),
) -> (lexer::Token, decl::ParameterDeclaration)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action202<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, lexer::Token), usize),
) -> ::std::option::Option<(lexer::Token, lexer::Token)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action203<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(lexer::Token, lexer::Token)>
{
    None
}

#[allow(unused_variables)]
fn __action204<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, lexer::Token, usize),
) -> (lexer::Token, lexer::Token)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action205<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::TypeQualifier, usize),
) -> ::std::vec::Vec<decl::TypeQualifier>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action206<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<decl::TypeQualifier>, usize),
    (_, e, _): (usize, decl::TypeQualifier, usize),
) -> ::std::vec::Vec<decl::TypeQualifier>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action207<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>), usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action208<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>, usize),
    (_, e, _): (usize, (lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>), usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action209<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, ::std::option::Option<Vec<decl::TypeQualifier>>, usize),
) -> (lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action210<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>), usize),
) -> ::std::option::Option<(lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action211<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>)>
{
    None
}

#[allow(unused_variables)]
fn __action212<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, expr::Expression, usize),
) -> ::std::option::Option<expr::Expression>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action213<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<expr::Expression>
{
    None
}

#[allow(unused_variables)]
fn __action214<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, Vec<decl::TypeQualifier>, usize),
) -> ::std::option::Option<Vec<decl::TypeQualifier>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action215<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Vec<decl::TypeQualifier>>
{
    None
}

#[allow(unused_variables)]
fn __action216<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>, usize),
) -> ::std::option::Option<::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action217<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>>
{
    None
}

#[allow(unused_variables)]
fn __action218<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, expr::Expression), usize),
) -> ::std::option::Option<(lexer::Token, expr::Expression)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action219<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(lexer::Token, expr::Expression)>
{
    None
}

#[allow(unused_variables)]
fn __action220<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, expr::Expression, usize),
) -> (lexer::Token, expr::Expression)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action221<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action222<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
) -> ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>
{
    v
}

#[allow(unused_variables)]
fn __action223<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, Vec<decl::Enumerator>, usize),
) -> (lexer::Token, Vec<decl::Enumerator>)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action224<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token), usize),
) -> ::std::option::Option<(lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action225<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)>
{
    None
}

#[allow(unused_variables)]
fn __action226<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, Vec<decl::Enumerator>, usize),
    (_, __2, _): (usize, ::std::option::Option<lexer::Token>, usize),
    (_, __3, _): (usize, lexer::Token, usize),
) -> (lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)
{
    (__0, __1, __2, __3)
}

#[allow(unused_variables)]
fn __action227<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> ::std::option::Option<lexer::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action228<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<lexer::Token>
{
    None
}

#[allow(unused_variables)]
fn __action229<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action230<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>, usize),
) -> ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>
{
    v
}

#[allow(unused_variables)]
fn __action231<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, decl::StructDeclarator, usize),
) -> (lexer::Token, decl::StructDeclarator)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action232<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, Vec<decl::StructDeclarator>, usize),
) -> ::std::option::Option<Vec<decl::StructDeclarator>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action233<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Vec<decl::StructDeclarator>>
{
    None
}

#[allow(unused_variables)]
fn __action234<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::StructDeclaration, usize),
) -> ::std::vec::Vec<decl::StructDeclaration>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action235<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<decl::StructDeclaration>, usize),
    (_, e, _): (usize, decl::StructDeclaration, usize),
) -> ::std::vec::Vec<decl::StructDeclaration>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action236<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
) -> ::std::option::Option<lexer::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action237<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<lexer::Token>
{
    None
}

#[allow(unused_variables)]
fn __action238<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action239<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>, usize),
) -> ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>
{
    v
}

#[allow(unused_variables)]
fn __action240<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, lexer::Token, usize),
    (_, __1, _): (usize, decl::InitDeclarator, usize),
) -> (lexer::Token, decl::InitDeclarator)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action241<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::DeclarationSpecifier, usize),
) -> ::std::vec::Vec<decl::DeclarationSpecifier>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action242<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    (_, e, _): (usize, decl::DeclarationSpecifier, usize),
) -> ::std::vec::Vec<decl::DeclarationSpecifier>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action243<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, Vec<decl::InitDeclarator>, usize),
) -> ::std::option::Option<Vec<decl::InitDeclarator>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action244<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Vec<decl::InitDeclarator>>
{
    None
}

#[allow(unused_variables)]
fn __action245<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<decl::Declaration>, usize),
) -> ::std::option::Option<::std::vec::Vec<decl::Declaration>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action246<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<::std::vec::Vec<decl::Declaration>>
{
    None
}

#[allow(unused_variables)]
fn __action247<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, decl::Declaration, usize),
) -> ::std::vec::Vec<decl::Declaration>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action248<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<decl::Declaration>, usize),
    (_, e, _): (usize, decl::Declaration, usize),
) -> ::std::vec::Vec<decl::Declaration>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action249<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<ast::ExternalDeclaration>
{
    vec![]
}

#[allow(unused_variables)]
fn __action250<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<ast::ExternalDeclaration>, usize),
) -> ::std::vec::Vec<ast::ExternalDeclaration>
{
    v
}

#[allow(unused_variables)]
fn __action251<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, ast::ExternalDeclaration, usize),
) -> ::std::vec::Vec<ast::ExternalDeclaration>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action252<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<ast::ExternalDeclaration>, usize),
    (_, e, _): (usize, ast::ExternalDeclaration, usize),
) -> ::std::vec::Vec<ast::ExternalDeclaration>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action253<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, decl::InitDeclarator), usize),
) -> ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action254<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>, usize),
    (_, e, _): (usize, (lexer::Token, decl::InitDeclarator), usize),
) -> ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action255<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, decl::StructDeclarator), usize),
) -> ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action256<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>, usize),
    (_, e, _): (usize, (lexer::Token, decl::StructDeclarator), usize),
) -> ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action257<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, Vec<decl::Enumerator>), usize),
) -> ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action258<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    (_, e, _): (usize, (lexer::Token, Vec<decl::Enumerator>), usize),
) -> ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action259<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, decl::ParameterDeclaration), usize),
) -> ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action260<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>, usize),
    (_, e, _): (usize, (lexer::Token, decl::ParameterDeclaration), usize),
) -> ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action261<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, lexer::Token), usize),
) -> ::std::vec::Vec<(lexer::Token, lexer::Token)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action262<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, lexer::Token)>, usize),
    (_, e, _): (usize, (lexer::Token, lexer::Token), usize),
) -> ::std::vec::Vec<(lexer::Token, lexer::Token)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action263<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer), usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action264<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    (_, e, _): (usize, (lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer), usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action265<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookbehind.clone()
}

#[allow(unused_variables)]
fn __action266<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookahead.clone()
}

#[allow(unused_variables)]
fn __action267<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, expr::GenericAssociation), usize),
) -> ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action268<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>, usize),
    (_, e, _): (usize, (lexer::Token, expr::GenericAssociation), usize),
) -> ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action269<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, (lexer::Token, expr::Expression), usize),
) -> ::std::vec::Vec<(lexer::Token, expr::Expression)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action270<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(lexer::Token, expr::Expression)>, usize),
    (_, e, _): (usize, (lexer::Token, expr::Expression), usize),
) -> ::std::vec::Vec<(lexer::Token, expr::Expression)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action271<
    'input,
>(
    input: &'input str,
    (_, __0, _): (usize, stmt::BlockItem, usize),
) -> ::std::vec::Vec<stmt::BlockItem>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action272<
    'input,
>(
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<stmt::BlockItem>, usize),
    (_, e, _): (usize, stmt::BlockItem, usize),
) -> ::std::vec::Vec<stmt::BlockItem>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action273<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
) -> (lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action227(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action226(
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action274<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, lexer::Token, usize),
) -> (lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action228(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action226(
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action275<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::InitializerList, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action227(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action77(
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action276<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::InitializerList, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action228(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action77(
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action277<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::TypeQualifier>, usize),
) -> (lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action278<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
) -> (lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action215(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action279<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, ::std::option::Option<expr::Expression>, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action214(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action280<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, ::std::option::Option<expr::Expression>, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action215(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action281<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::TypeQualifier>, usize),
    __4: (usize, expr::Expression, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action214(
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action282<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action215(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action283<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, ::std::option::Option<expr::Expression>, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action214(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action284<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, ::std::option::Option<expr::Expression>, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action215(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action285<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::TypeQualifier>, usize),
    __4: (usize, expr::Expression, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action214(
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action55(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action286<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action215(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action55(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action287<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::TypeQualifier>, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action277(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action207(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action288<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action278(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action207(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action289<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action277(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action208(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action290<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>, usize),
    __1: (usize, lexer::Token, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action278(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action208(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action291<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
) -> ::std::option::Option<(lexer::Token, lexer::Token)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action204(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action202(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action292<
    'input,
>(
    input: &'input str,
    __0: (usize, Vec<decl::ParameterDeclaration>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::ParameterTypeList
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action291(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action293<
    'input,
>(
    input: &'input str,
    __0: (usize, Vec<decl::ParameterDeclaration>, usize),
) -> decl::ParameterTypeList
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action203(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action294<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, expr::Expression, usize),
) -> ::std::vec::Vec<(lexer::Token, expr::Expression)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action175(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action269(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action295<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, expr::Expression)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, expr::Expression, usize),
) -> ::std::vec::Vec<(lexer::Token, expr::Expression)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action175(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action270(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action296<
    'input,
>(
    input: &'input str,
    __0: (usize, expr::Expression, usize),
) -> Vec<expr::Expression>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action173(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action98(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action297<
    'input,
>(
    input: &'input str,
    __0: (usize, expr::Expression, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, expr::Expression)>, usize),
) -> Vec<expr::Expression>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action174(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action98(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action298<
    'input,
>(
    input: &'input str,
    __0: (usize, expr::Expression, usize),
) -> expr::Expression
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action173(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action299<
    'input,
>(
    input: &'input str,
    __0: (usize, expr::Expression, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, expr::Expression)>, usize),
) -> expr::Expression
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action174(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action300<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Designator>, usize),
    __2: (usize, decl::Initializer, usize),
) -> (lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action188(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action187(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action301<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::Initializer, usize),
) -> (lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action189(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action187(
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action302<
    'input,
>(
    input: &'input str,
    __0: (usize, Vec<decl::Designator>, usize),
    __1: (usize, decl::Initializer, usize),
    __2: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
) -> decl::InitializerList
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action188(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action78(
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action303<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::Initializer, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
) -> decl::InitializerList
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action189(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action78(
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action304<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Designator>, usize),
    __2: (usize, decl::Initializer, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>
{
    let __start0 = __0.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action300(
        input,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action263(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action305<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::Initializer, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action301(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action263(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action306<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::Designator>, usize),
    __3: (usize, decl::Initializer, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>
{
    let __start0 = __1.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action300(
        input,
        __1,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action264(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action307<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, decl::Initializer, usize),
) -> ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action301(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action264(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action308<
    'input,
>(
    input: &'input str,
    __0: (usize, Vec<decl::Designator>, usize),
    __1: (usize, decl::Initializer, usize),
) -> decl::InitializerList
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action185(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action302(
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action309<
    'input,
>(
    input: &'input str,
    __0: (usize, Vec<decl::Designator>, usize),
    __1: (usize, decl::Initializer, usize),
    __2: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
) -> decl::InitializerList
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action186(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action302(
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action310<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::Initializer, usize),
) -> decl::InitializerList
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action185(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action311<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::Initializer, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
) -> decl::InitializerList
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action186(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action312<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
) -> ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action223(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action257(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action313<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::Enumerator>, usize),
) -> ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action223(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action258(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action314<
    'input,
>(
    input: &'input str,
    __0: (usize, Vec<decl::Enumerator>, usize),
) -> Vec<decl::Enumerator>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action221(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action40(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action315<
    'input,
>(
    input: &'input str,
    __0: (usize, Vec<decl::Enumerator>, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
) -> Vec<decl::Enumerator>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action222(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action40(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action316<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, expr::GenericAssociation, usize),
) -> ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action180(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action267(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action317<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, expr::GenericAssociation, usize),
) -> ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action180(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action268(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action318<
    'input,
>(
    input: &'input str,
    __0: (usize, expr::GenericAssociation, usize),
) -> Vec<expr::GenericAssociation>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action178(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action319<
    'input,
>(
    input: &'input str,
    __0: (usize, expr::GenericAssociation, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, expr::GenericAssociation)>, usize),
) -> Vec<expr::GenericAssociation>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action179(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action320<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
) -> ::std::vec::Vec<(lexer::Token, lexer::Token)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action196(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action261(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action321<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, lexer::Token)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> ::std::vec::Vec<(lexer::Token, lexer::Token)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action196(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action262(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action322<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
) -> (lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>)
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action194(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action66(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action323<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, lexer::Token)>, usize),
) -> (lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>)
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action195(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action66(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action324<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::InitDeclarator, usize),
) -> ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action240(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action253(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action325<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, decl::InitDeclarator, usize),
) -> ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action240(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action254(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action326<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::InitDeclarator, usize),
) -> Vec<decl::InitDeclarator>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action238(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action11(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action327<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::InitDeclarator, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, decl::InitDeclarator)>, usize),
) -> Vec<decl::InitDeclarator>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action239(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action11(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action328<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::ParameterDeclaration, usize),
) -> ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action201(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action259(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action329<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, decl::ParameterDeclaration, usize),
) -> ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action201(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action260(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action330<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::ParameterDeclaration, usize),
) -> Vec<decl::ParameterDeclaration>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action199(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action63(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action331<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::ParameterDeclaration, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>, usize),
) -> Vec<decl::ParameterDeclaration>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action200(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action63(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action332<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::StructDeclarator, usize),
) -> ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action231(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action255(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action333<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, decl::StructDeclarator, usize),
) -> ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action231(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action256(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action334<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::StructDeclarator, usize),
) -> Vec<decl::StructDeclarator>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action229(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action37(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action335<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::StructDeclarator, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, decl::StructDeclarator)>, usize),
) -> Vec<decl::StructDeclarator>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action230(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action37(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action336<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, expr::Expression, usize),
) -> ::std::option::Option<(lexer::Token, expr::Expression)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action220(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action218(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action337<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, expr::Expression, usize),
) -> Vec<decl::Enumerator>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action336(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action42(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action338<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
) -> Vec<decl::Enumerator>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action219(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action42(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action339<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
) -> (lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action314(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action273(
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action340<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, lexer::Token, usize),
) -> (lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action315(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action273(
        input,
        __0,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action341<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, lexer::Token, usize),
) -> (lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action314(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action274(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action342<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __3: (usize, lexer::Token, usize),
) -> (lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action315(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action274(
        input,
        __0,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action343<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
) -> ::std::option::Option<(lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)>
{
    let __start0 = __0.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action339(
        input,
        __0,
        __1,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action224(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action344<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, lexer::Token, usize),
) -> ::std::option::Option<(lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)>
{
    let __start0 = __0.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action340(
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action224(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action345<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, lexer::Token, usize),
) -> ::std::option::Option<(lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)>
{
    let __start0 = __0.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action341(
        input,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action224(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action346<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Enumerator>, usize),
    __2: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __3: (usize, lexer::Token, usize),
) -> ::std::option::Option<(lexer::Token, Vec<decl::Enumerator>, ::std::option::Option<lexer::Token>, lexer::Token)>
{
    let __start0 = __0.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action342(
        input,
        __0,
        __1,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action224(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action347<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ::std::option::Option<lexer::Token>, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::Enumerator>, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __2.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action343(
        input,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action39(
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action348<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ::std::option::Option<lexer::Token>, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::Enumerator>, usize),
    __4: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __5: (usize, lexer::Token, usize),
    __6: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __2.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action344(
        input,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action39(
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action349<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ::std::option::Option<lexer::Token>, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::Enumerator>, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __2.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action345(
        input,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action39(
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action350<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ::std::option::Option<lexer::Token>, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::Enumerator>, usize),
    __4: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __2.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action346(
        input,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action39(
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action351<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ::std::option::Option<lexer::Token>, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action225(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action39(
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action352<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, usize, usize),
) -> String
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action266(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action182(
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action353<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, usize, usize),
) -> String
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action266(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action181(
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action354<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
) -> String
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action265(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action352(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action355<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
) -> String
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action265(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action353(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action356<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    __1: (usize, decl::AbstractDeclarator, usize),
) -> decl::ParameterDeclaration
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action197(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action65(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action357<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
) -> decl::ParameterDeclaration
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action198(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action65(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action358<
    'input,
>(
    input: &'input str,
    __0: (usize, (decl::TypeSpecifier, decl::TypeQualifier), usize),
    __1: (usize, decl::AbstractDeclarator, usize),
) -> ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>)
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action197(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action359<
    'input,
>(
    input: &'input str,
    __0: (usize, (decl::TypeSpecifier, decl::TypeQualifier), usize),
) -> ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>)
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action198(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action360<
    'input,
>(
    input: &'input str,
    __0: (usize, expr::Expression, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<expr::Expression>, usize),
    __3: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action176(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action91(
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action361<
    'input,
>(
    input: &'input str,
    __0: (usize, expr::Expression, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action177(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action91(
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action362<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action212(
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action279(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action363<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action213(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action279(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action364<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, expr::Expression, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action212(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action280(
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action365<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::option::Option<decl::DirectAbstractDeclarator>, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action213(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action280(
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action366<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action212(
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action367<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action213(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action368<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, expr::Expression, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action212(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action284(
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action369<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action213(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action284(
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action370<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
) -> stmt::CompoundStmt
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action171(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action150(
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action371<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ::std::vec::Vec<stmt::BlockItem>, usize),
    __2: (usize, lexer::Token, usize),
) -> stmt::CompoundStmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action172(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action150(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action372<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    __1: (usize, decl::Declarator, usize),
    __2: (usize, ::std::vec::Vec<decl::Declaration>, usize),
    __3: (usize, stmt::CompoundStmt, usize),
) -> ast::FunctionDefinition
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action245(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action5(
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action373<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    __1: (usize, decl::Declarator, usize),
    __2: (usize, stmt::CompoundStmt, usize),
) -> ast::FunctionDefinition
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action246(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action5(
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action374<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action362(
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action375<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::TypeQualifier>, usize),
    __2: (usize, expr::Expression, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action193(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action362(
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action376<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action363(
        input,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action377<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::TypeQualifier>, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action193(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action363(
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action378<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, expr::Expression, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action364(
        input,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action379<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, expr::Expression, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action193(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action364(
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action380<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action365(
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action381<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action193(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action365(
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action382<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::TypeQualifier>, usize),
    __4: (usize, expr::Expression, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action281(
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action383<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action193(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action281(
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action384<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action282(
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action385<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, expr::Expression, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action193(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action282(
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action386<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::TypeQualifier>, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, expr::Expression, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action73(
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action387<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::TypeQualifier>, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action193(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action73(
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action388<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action74(
        input,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action389<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action193(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action74(
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action390<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, ::std::option::Option<decl::ParameterTypeList>, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action75(
        input,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action391<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ::std::option::Option<decl::ParameterTypeList>, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action193(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action75(
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action392<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, ::std::option::Option<stmt::ForInit>, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, expr::Expression, usize),
    __6: (usize, lexer::Token, usize),
    __7: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __start1 = __5.0.clone();
    let __end1 = __5.2.clone();
    let __temp0 = __action167(
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action167(
        input,
        __5,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action162(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __temp1,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action393<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, ::std::option::Option<stmt::ForInit>, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, lexer::Token, usize),
    __6: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __start1 = __4.2.clone();
    let __end1 = __5.0.clone();
    let __temp0 = __action167(
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action168(
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action162(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __temp1,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action394<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, ::std::option::Option<stmt::ForInit>, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, expr::Expression, usize),
    __5: (usize, lexer::Token, usize),
    __6: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __start1 = __4.0.clone();
    let __end1 = __4.2.clone();
    let __temp0 = __action168(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action167(
        input,
        __4,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action162(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __temp1,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action395<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, ::std::option::Option<stmt::ForInit>, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __start1 = __3.2.clone();
    let __end1 = __4.0.clone();
    let __temp0 = __action168(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action168(
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action162(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __temp1,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action396<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, expr::Expression, usize),
    __2: (usize, lexer::Token, usize),
) -> stmt::Statement
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action167(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action166(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action397<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
) -> stmt::Statement
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action168(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action166(
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action398<
    'input,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ast::Ast
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action249(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action399<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<ast::ExternalDeclaration>, usize),
) -> ast::Ast
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action250(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action400<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, stmt::ForInit, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, expr::Expression, usize),
    __6: (usize, lexer::Token, usize),
    __7: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action392(
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action401<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, expr::Expression, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, expr::Expression, usize),
    __5: (usize, lexer::Token, usize),
    __6: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action170(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action392(
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action402<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, stmt::ForInit, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, lexer::Token, usize),
    __6: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action393(
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action403<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, expr::Expression, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action170(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action393(
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action404<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, stmt::ForInit, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, expr::Expression, usize),
    __5: (usize, lexer::Token, usize),
    __6: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action394(
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action405<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, expr::Expression, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action170(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action394(
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action406<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, stmt::ForInit, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action395(
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action407<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, stmt::Statement, usize),
) -> stmt::Statement
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action170(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action395(
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action408<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::Enumerator>, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action236(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action347(
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action409<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::Enumerator>, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action237(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action347(
        input,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action410<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::Enumerator>, usize),
    __4: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __5: (usize, lexer::Token, usize),
    __6: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action236(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action348(
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action411<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::Enumerator>, usize),
    __3: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action237(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action348(
        input,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action412<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::Enumerator>, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action236(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action349(
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action413<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::Enumerator>, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action237(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action349(
        input,
        __0,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action414<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, Vec<decl::Enumerator>, usize),
    __4: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action236(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action350(
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action415<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, Vec<decl::Enumerator>, usize),
    __3: (usize, ::std::vec::Vec<(lexer::Token, Vec<decl::Enumerator>)>, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action237(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action350(
        input,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action416<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action236(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action351(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action417<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
) -> decl::EnumSpecifier
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action237(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action351(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action418<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::ObjKind, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, ::std::vec::Vec<decl::StructDeclaration>, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::StructOrUnionSpecifier
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action236(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action29(
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action419<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::ObjKind, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, ::std::vec::Vec<decl::StructDeclaration>, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::StructOrUnionSpecifier
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action237(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action29(
        input,
        __0,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action420<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, (lexer::Token, ::std::vec::Vec<(lexer::Token, lexer::Token)>), usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action210(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action59(
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action421<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectDeclarator
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action211(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action59(
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action422<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    __1: (usize, Vec<decl::InitDeclarator>, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::Declaration
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action243(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action6(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action423<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<decl::DeclarationSpecifier>, usize),
    __1: (usize, lexer::Token, usize),
) -> decl::Declaration
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action244(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action6(
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action424<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Designator>, usize),
    __2: (usize, decl::Initializer, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action308(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action275(
        input,
        __0,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action425<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Designator>, usize),
    __2: (usize, decl::Initializer, usize),
    __3: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __4: (usize, lexer::Token, usize),
    __5: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __1.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action309(
        input,
        __1,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action275(
        input,
        __0,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action426<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::Initializer, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action310(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action275(
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action427<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::Initializer, usize),
    __2: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action311(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action275(
        input,
        __0,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action428<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Designator>, usize),
    __2: (usize, decl::Initializer, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action308(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        input,
        __0,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action429<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, Vec<decl::Designator>, usize),
    __2: (usize, decl::Initializer, usize),
    __3: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __4: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __1.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action309(
        input,
        __1,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        input,
        __0,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action430<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::Initializer, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action310(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action431<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::Initializer, usize),
    __2: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::Initializer
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action311(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        input,
        __0,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action432<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, Vec<decl::Designator>, usize),
    __5: (usize, decl::Initializer, usize),
    __6: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __4.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action308(
        input,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action433<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, Vec<decl::Designator>, usize),
    __5: (usize, decl::Initializer, usize),
    __6: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __7: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __4.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action309(
        input,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
fn __action434<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, decl::Initializer, usize),
    __5: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action310(
        input,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action435<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, decl::Initializer, usize),
    __5: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __6: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __4.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action311(
        input,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action436<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, Vec<decl::Designator>, usize),
    __5: (usize, decl::Initializer, usize),
    __6: (usize, lexer::Token, usize),
    __7: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __4.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action308(
        input,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action437<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, Vec<decl::Designator>, usize),
    __5: (usize, decl::Initializer, usize),
    __6: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __7: (usize, lexer::Token, usize),
    __8: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __4.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action309(
        input,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action438<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, decl::Initializer, usize),
    __5: (usize, lexer::Token, usize),
    __6: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action310(
        input,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action439<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, ((decl::TypeSpecifier, decl::TypeQualifier), ::std::option::Option<decl::AbstractDeclarator>), usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
    __4: (usize, decl::Initializer, usize),
    __5: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::Designator>>, decl::Initializer)>, usize),
    __6: (usize, lexer::Token, usize),
    __7: (usize, lexer::Token, usize),
) -> expr::Expression
{
    let __start0 = __4.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action311(
        input,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action440<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::ParameterDeclaration, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::ParameterTypeList
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action330(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action292(
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action441<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::ParameterDeclaration, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>, usize),
    __2: (usize, lexer::Token, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::ParameterTypeList
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action331(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action292(
        input,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action442<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::ParameterDeclaration, usize),
) -> decl::ParameterTypeList
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action330(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action293(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action443<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::ParameterDeclaration, usize),
    __1: (usize, ::std::vec::Vec<(lexer::Token, decl::ParameterDeclaration)>, usize),
) -> decl::ParameterTypeList
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action331(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action293(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action444<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, decl::ParameterTypeList, usize),
    __3: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action190(
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action390(
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action445<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
    __1: (usize, lexer::Token, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action191(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action390(
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action446<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, decl::ParameterTypeList, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action190(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action391(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action447<
    'input,
>(
    input: &'input str,
    __0: (usize, lexer::Token, usize),
    __1: (usize, lexer::Token, usize),
) -> decl::DirectAbstractDeclarator
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action191(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action391(
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action448<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>, usize),
    __1: (usize, decl::DirectAbstractDeclarator, usize),
) -> decl::AbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action216(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action69(
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action449<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectAbstractDeclarator, usize),
) -> decl::AbstractDeclarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action217(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action69(
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action450<
    'input,
>(
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(lexer::Token, ::std::option::Option<Vec<decl::TypeQualifier>>)>, usize),
    __1: (usize, decl::DirectDeclarator, usize),
) -> decl::Declarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action216(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action51(
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action451<
    'input,
>(
    input: &'input str,
    __0: (usize, decl::DirectDeclarator, usize),
) -> decl::Declarator
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action217(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action51(
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action452<
    'input,
>(
    input: &'input str,
    __0: (usize, (decl::TypeSpecifier, decl::TypeQualifier), usize),
    __1: (usize, Vec<decl::StructDeclarator>, usize),
    __2: (usize, lexer::Token, usize),
) -> decl::StructDeclaration
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action232(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action34(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action453<
    'input,
>(
    input: &'input str,
    __0: (usize, (decl::TypeSpecifier, decl::TypeQualifier), usize),
    __1: (usize, lexer::Token, usize),
) -> decl::StructDeclaration
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action233(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action34(
        input,
        __0,
        __temp0,
        __1,
    )
}

pub trait __ToTriple<'input, > {
    fn to_triple(value: Self) -> Result<(usize,lexer::Token,usize), __lalrpop_util::ParseError<usize, lexer::Token, lexer::ParserError>>;
}

impl<'input, > __ToTriple<'input, > for (usize, lexer::Token, usize) {
    fn to_triple(value: Self) -> Result<(usize,lexer::Token,usize), __lalrpop_util::ParseError<usize, lexer::Token, lexer::ParserError>> {
        Ok(value)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(usize, lexer::Token, usize), lexer::ParserError> {
    fn to_triple(value: Self) -> Result<(usize,lexer::Token,usize), __lalrpop_util::ParseError<usize, lexer::Token, lexer::ParserError>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
