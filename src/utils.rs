    // As described in 6.7.2.2 extract C type in stream of specifiers 
    /*
    __________________________________________________________________________________________
    | void | char | short | long | signed | unsigned | int | float | double | result type    |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  1   |  0   |  0    |  0   |   0    |    0     |  0  |   0   |   0    | void           |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  1   |  0    |  0   |   0    |    0     |  0  |   0   |   0    | char           |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  1   |  0    |  0   |   1    |    0     |  0  |   0   |   0    | char signed    |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  1   |  0    |  0   |   0    |    1     |  0  |   0   |   0    | char unsigned  |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  1    |  0   |   0    |    0     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|                |
    |  0   |  0   |  1    |  0   |   1    |    0     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------| short          |
    |  0   |  0   |  1    |  0   |   0    |    0     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|                |
    |  0   |  0   |  1    |  0   |   1    |    0     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  1    |  0   |   0    |    1     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------| short unsigned |
    |  0   |  0   |  1    |  0   |   0    |    1     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  0    |  0   |   0    |    0     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|                |
    |  0   |  0   |  0    |  0   |   1    |    0     |  1  |   0   |   0    | int            |
    |------|------|-------|------|--------|----------|-----|-------|--------|                |
    |  0   |  0   |  0    |  0   |   1    |    0     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  0    |  0   |   0    |    1     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------| int unsigned   |
    |  0   |  0   |  0    |  0   |   0    |    1     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  0    |  1   |   0    |    0     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|                |
    |  0   |  0   |  0    |  1   |   1    |    0     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------| long           |
    |  0   |  0   |  0    |  1   |   0    |    0     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|                |
    |  0   |  0   |  0    |  1   |   1    |    0     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  0    |  1   |   0    |    1     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------| long unsigned  |
    |  0   |  0   |  0    |  1   |   0    |    1     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  0    |  2   |   0    |    0     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|                |
    |  0   |  0   |  0    |  2   |   1    |    0     |  0  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------| long long      |
    |  0   |  0   |  0    |  2   |   0    |    0     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|                |
    |  0   |  0   |  0    |  2   |   1    |    0     |  1  |   0   |   0    |                |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  0    |  0   |   0    |    0     |  0  |   1   |   0    | float          |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  0    |  0   |   0    |    0     |  0  |   0   |   1    | double         |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    |  0   |  0   |  0    |  1   |   0    |    0     |  0  |   0   |   1    | double long    |
    |------|------|-------|------|--------|----------|-----|-------|--------|----------------|
    */
    // TODO:
    // _Bool
    // float _Complex
    // double _Complex
    // long double _Complex
    // atomic type specifier
    
    // struct or union specifier
    // enum specifier
    
    // typedef name
    use std::convert::TryInto;
    use multimap::MultiMap;
    use crate::r#type;
    use lang_c::{ast::*, span::*};
    use crate::diagnostics::*;

    #[derive(Clone)]
    pub struct TypeHolder<'a>(MultiMap::<u8, &'a Node<TypeSpecifier>>);

    impl<'a> TypeHolder<'a> {
        pub fn new() -> Self {
            Self(Default::default())
        }

        pub fn process_specifier(&mut self, item: &'a Node<TypeSpecifier>) {
            self.0.insert(0, item)
        }
    }

    impl<'a> TryInto<r#type::Type> for TypeHolder<'a> {
        type Error = Diagnostic;
        
        fn try_into(self) -> Result<r#type::Type, Self::Error> {
            if self.0.len() > 3 {
                let iter = self.0.into_iter()
                    .flat_map(|item| item.1.into_iter());
                return Err(wrong_type_declaration(iter));
            }
            // r#type::Type::new_void();
            // r#type::Type::new_signed_char();
            // r#type::Type::new_unsigned_char();
            // r#type::Type::new_signed_char();
            // r#type::Type::new_unsigned_short_int();
            Ok(r#type::Type::new_unsigned_short_int())
        }
    }
